

Microchip Technology PIC18 LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Thu Nov 22 17:09:54 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    40                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    46                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    47                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    48  0000                     
    49                           ; Version 2.00
    50                           ; Generated 27/05/2018 GMT
    51                           ; 
    52                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    53                           ; All rights reserved.
    54                           ; 
    55                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    56                           ; 
    57                           ; Redistribution and use in source and binary forms, with or without modification, are
    58                           ; permitted provided that the following conditions are met:
    59                           ; 
    60                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    61                           ;        conditions and the following disclaimer.
    62                           ; 
    63                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    64                           ;        of conditions and the following disclaimer in the documentation and/or other
    65                           ;        materials provided with the distribution.
    66                           ; 
    67                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    68                           ;        software without specific prior written permission.
    69                           ; 
    70                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    71                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    72                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    73                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    74                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    75                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    76                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    77                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    78                           ; 
    79                           ; 
    80                           ; Code-generator required, PIC18F4550 Definitions
    81                           ; 
    82                           ; SFR Addresses
    83  0000                     
    84                           	psect	idataCOMRAM
    85  0076A3                     __pidataCOMRAM:
    86                           	opt stack 0
    87                           
    88                           ;initializer for LCD_init@F3134
    89  0076A3  00                 	db	0
    90  0076A4  08                 	db	8
    91  0076A5  0C                 	db	12
    92  0076A6  0E                 	db	14
    93  0076A7  0C                 	db	12
    94  0076A8  08                 	db	8
    95  0076A9  00                 	db	0
    96                           
    97                           ;initializer for _col
    98  0076AA  FF                 	db	255
    99                           
   100                           ;initializer for _fila
   101  0076AB  FF                 	db	255
   102                           
   103                           ;initializer for _EncoderSW
   104  0076AC  02                 	db	2
   105                           
   106                           ;initializer for tic_debounce@debounce_tic
   107  0076AD  0A                 	db	10
   108                           
   109                           ;initializer for _OffsetPeriodo
   110  0076AE  20                 	db	32
   111                           
   112                           ;initializer for _UpperByte
   113  0076AF  FF                 	db	255
   114                           
   115                           ;initializer for _ENCODER
   116  0076B0  03                 	db	3
   117                           
   118                           ;initializer for _LCD
   119  0076B1  01                 	db	1
   120                           
   121                           ;initializer for _frecuencia
   122  0076B2  03E8               	dw	1000
   123                           
   124                           	psect	smallconst
   125  002018                     __psmallconst:
   126                           	opt stack 0
   127  002018  00                 	db	0
   128  002019                     _teclas:
   129                           	opt stack 0
   130  002019  01                 	db	1
   131  00201A  02                 	db	2
   132  00201B  03                 	db	3
   133  00201C  04                 	db	4
   134  00201D  05                 	db	5
   135  00201E  06                 	db	6
   136  00201F  07                 	db	7
   137  002020  08                 	db	8
   138  002021  09                 	db	9
   139  002022  2A                 	db	42
   140  002023  00                 	db	0
   141  002024  2B                 	db	43
   142  002025                     __end_of_teclas:
   143                           	opt stack 0
   144  002025                     STR_1:
   145  002025  20                 	db	32
   146  002026  20                 	db	32
   147  002027  20                 	db	32
   148  002028  49                 	db	73	;'I'
   149  002029  4E                 	db	78	;'N'
   150  00202A  53                 	db	83	;'S'
   151  00202B  4F                 	db	79	;'O'
   152  00202C  4C                 	db	76	;'L'
   153  00202D  41                 	db	65	;'A'
   154  00202E  44                 	db	68	;'D'
   155  00202F  4F                 	db	79	;'O'
   156  002030  52                 	db	82	;'R'
   157  002031  41                 	db	65	;'A'
   158  002032  00                 	db	0
   159  002033                     STR_3:
   160  002033  41                 	db	65	;'A'
   161  002034  53                 	db	83	;'S'
   162  002035  50                 	db	80	;'P'
   163  002036  49                 	db	73	;'I'
   164  002037  52                 	db	82	;'R'
   165  002038  41                 	db	65	;'A'
   166  002039  44                 	db	68	;'D'
   167  00203A  4F                 	db	79	;'O'
   168  00203B  52                 	db	82	;'R'
   169  00203C  41                 	db	65	;'A'
   170  00203D  00                 	db	0
   171  00203E                     STR_6:
   172  00203E  4C                 	db	76	;'L'
   173  00203F  55                 	db	85	;'U'
   174  002040  43                 	db	67	;'C'
   175  002041  45                 	db	69	;'E'
   176  002042  53                 	db	83	;'S'
   177  002043  00                 	db	0
   178  002044                     STR_2:
   179  002044  50                 	db	80	;'P'
   180  002045  57                 	db	87	;'W'
   181  002046  4D                 	db	77	;'M'
   182  002047  00                 	db	0
   183  002048                     STR_5:
   184  002048  4F                 	db	79	;'O'
   185  002049  66                 	db	102	;'f'
   186  00204A  66                 	db	102	;'f'
   187  00204B  00                 	db	0
   188  00204C                     STR_4:
   189  00204C  4F                 	db	79	;'O'
   190  00204D  6E                 	db	110	;'n'
   191  00204E  00                 	db	0
   192  0000                     
   193                           ; #config settings
   194  00204F  00                 	db	0	; dummy byte at the end
   195  0000                     
   196                           	psect	nvCOMRAM
   197  000046                     __pnvCOMRAM:
   198                           	opt stack 0
   199  000046                     _LCD_tout:
   200                           	opt stack 0
   201  000046                     	ds	2
   202  0000                     _LATBbits	set	3978
   203  0000                     _PORTBbits	set	3969
   204  0000                     _INTCON3bits	set	4080
   205  0000                     _INTCON2bits	set	4081
   206  0000                     _TRISBbits	set	3987
   207  0000                     _EECON2	set	4007
   208  0000                     _EECON1bits	set	4006
   209  0000                     _EEDATA	set	4008
   210  0000                     _EEADR	set	4009
   211  0000                     _PORTB	set	3969
   212  0000                     _ADRESL	set	4035
   213  0000                     _ADRESH	set	4036
   214  0000                     _ADCON0bits	set	4034
   215  0000                     _ADCON2	set	4032
   216  0000                     _ADCON0	set	4034
   217  0000                     _PORTA	set	3968
   218  0000                     _TXREG	set	4013
   219  0000                     _PORTAbits	set	3968
   220  0000                     _TRISAbits	set	3986
   221  0000                     _T2CONbits	set	4042
   222  0000                     _CCP1CONbits	set	4029
   223  0000                     _CCPR1L	set	4030
   224  0000                     _PR2	set	4043
   225  0000                     _TRISCbits	set	3988
   226  0000                     _RCREG	set	4014
   227  0000                     _RCSTAbits	set	4011
   228  0000                     _SPBRGH	set	4016
   229  0000                     _SPBRG	set	4015
   230  0000                     _BAUDCONbits	set	4024
   231  0000                     _TXSTAbits	set	4012
   232  0000                     _PIE1bits	set	3997
   233  0000                     _PIR1bits	set	3998
   234  0000                     _TMR1H	set	4047
   235  0000                     _TMR1L	set	4046
   236  0000                     _T1CONbits	set	4045
   237  0000                     _ADCON1	set	4033
   238  0000                     _CMCON	set	4020
   239  0000                     _TRISE	set	3990
   240  0000                     _TRISC	set	3988
   241  0000                     _TRISB	set	3987
   242  0000                     _TRISA	set	3986
   243  0000                     _LATE	set	3981
   244  0000                     _LATC	set	3979
   245  0000                     _LATB	set	3978
   246  0000                     _LATA	set	3977
   247  0000                     _PORTDbits	set	3971
   248  0000                     _LATD	set	3980
   249  0000                     _PORTEbits	set	3972
   250  0000                     _TRISEbits	set	3990
   251  0000                     _TRISD	set	3989
   252  0000                     _TMR0L	set	4054
   253  0000                     _TMR0H	set	4055
   254  0000                     _INTCONbits	set	4082
   255  0000                     _T0CONbits	set	4053
   256  0000                     _RBIE	set	32659
   257  0000                     _RBIF	set	32656
   258  0000                     _RBIP	set	32648
   259  0000                     _RBPU	set	32655
   260  0000                     _INT1IF	set	32640
   261  0000                     _INT1IE	set	32643
   262  0000                     _INT0IF	set	32657
   263  0000                     _INT0IE	set	32660
   264  0000                     _TMR0IF	set	32658
   265                           
   266                           	psect	cinit
   267  00780C                     __pcinit:
   268                           	opt stack 0
   269  00780C                     start_initialization:
   270                           	opt stack 0
   271  00780C                     __initialization:
   272                           	opt stack 0
   273                           
   274                           ; Initialize objects allocated to COMRAM (17 bytes)
   275                           ; load TBLPTR registers with __pidataCOMRAM
   276  00780C  0EA3               	movlw	low __pidataCOMRAM
   277  00780E  6EF6               	movwf	tblptrl,c
   278  007810  0E76               	movlw	high __pidataCOMRAM
   279  007812  6EF7               	movwf	tblptrh,c
   280  007814  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   281  007816  6EF8               	movwf	tblptru,c
   282  007818  EE00  F035         	lfsr	0,__pdataCOMRAM
   283  00781C  EE10 F011          	lfsr	1,17
   284  007820                     copy_data0:
   285  007820  0009               	tblrd		*+
   286  007822  CFF5 FFEE          	movff	tablat,postinc0
   287  007826  50E5               	movf	postdec1,w,c
   288  007828  50E1               	movf	fsr1l,w,c
   289  00782A  E1FA               	bnz	copy_data0
   290                           
   291                           ; Clear objects allocated to COMRAM (26 bytes)
   292  00782C  EE00  F001         	lfsr	0,__pbssCOMRAM
   293  007830  0E1A               	movlw	26
   294  007832                     clear_0:
   295  007832  6AEE               	clrf	postinc0,c
   296  007834  06E8               	decf	wreg,f,c
   297  007836  E1FD               	bnz	clear_0
   298  007838                     end_of_initialization:
   299                           	opt stack 0
   300  007838                     __end_of__initialization:
   301                           	opt stack 0
   302  007838  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   303  00783A  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   304  00783C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   305  00783E  6EF8               	movwf	tblptru,c
   306  007840  0100               	movlb	0
   307  007842  EFA3  F03B         	goto	_main	;jump to C main() function
   308                           tblptru	equ	0xFF8
   309                           tblptrh	equ	0xFF7
   310                           tblptrl	equ	0xFF6
   311                           tablat	equ	0xFF5
   312                           postinc0	equ	0xFEE
   313                           wreg	equ	0xFE8
   314                           postdec1	equ	0xFE5
   315                           fsr1l	equ	0xFE1
   316                           
   317                           	psect	bssCOMRAM
   318  000001                     __pbssCOMRAM:
   319                           	opt stack 0
   320  000001                     antireboteEncoder@cont:
   321                           	opt stack 0
   322  000001                     	ds	2
   323  000003                     _desplazar_tout:
   324                           	opt stack 0
   325  000003                     	ds	2
   326  000005                     _MedioPeriodoSet:
   327                           	opt stack 0
   328  000005                     	ds	2
   329  000007                     _varPWM:
   330                           	opt stack 0
   331  000007                     	ds	2
   332  000009                     tecla@status_KB:
   333                           	opt stack 0
   334  000009                     	ds	1
   335  00000A                     _delay_kb:
   336                           	opt stack 0
   337  00000A                     	ds	1
   338  00000B                     _flag_kb:
   339                           	opt stack 0
   340  00000B                     	ds	1
   341  00000C                     _encoderTout:
   342                           	opt stack 0
   343  00000C                     	ds	1
   344  00000D                     _Flag_RB1:
   345                           	opt stack 0
   346  00000D                     	ds	1
   347  00000E                     _Flag_RB0:
   348                           	opt stack 0
   349  00000E                     	ds	1
   350  00000F                     debounce@cnt1:
   351                           	opt stack 0
   352  00000F                     	ds	1
   353  000010                     debounce@cnt0:
   354                           	opt stack 0
   355  000010                     	ds	1
   356  000011                     debounce@state:
   357                           	opt stack 0
   358  000011                     	ds	1
   359  000012                     _MultiplicadorSet:
   360                           	opt stack 0
   361  000012                     	ds	1
   362  000013                     _Multiplicador:
   363                           	opt stack 0
   364  000013                     	ds	1
   365  000014                     _LowerByte:
   366                           	opt stack 0
   367  000014                     	ds	1
   368  000015                     _varEncoderSW:
   369                           	opt stack 0
   370  000015                     	ds	1
   371  000016                     _EstadoDeLosBotones:
   372                           	opt stack 0
   373  000016                     	ds	1
   374  000017                     _boolPWM:
   375                           	opt stack 0
   376  000017                     	ds	1
   377  000018                     _boolLUCES:
   378                           	opt stack 0
   379  000018                     	ds	1
   380  000019                     _boolASP:
   381                           	opt stack 0
   382  000019                     	ds	1
   383  00001A                     _MENU:
   384                           	opt stack 0
   385  00001A                     	ds	1
   386                           tblptru	equ	0xFF8
   387                           tblptrh	equ	0xFF7
   388                           tblptrl	equ	0xFF6
   389                           tablat	equ	0xFF5
   390                           postinc0	equ	0xFEE
   391                           wreg	equ	0xFE8
   392                           postdec1	equ	0xFE5
   393                           fsr1l	equ	0xFE1
   394                           
   395                           	psect	dataCOMRAM
   396  000035                     __pdataCOMRAM:
   397                           	opt stack 0
   398  000035                     LCD_init@F3134:
   399                           	opt stack 0
   400  000035                     	ds	7
   401  00003C                     _col:
   402                           	opt stack 0
   403  00003C                     	ds	1
   404  00003D                     _fila:
   405                           	opt stack 0
   406  00003D                     	ds	1
   407  00003E                     _EncoderSW:
   408                           	opt stack 0
   409  00003E                     	ds	1
   410  00003F                     tic_debounce@debounce_tic:
   411                           	opt stack 0
   412  00003F                     	ds	1
   413  000040                     _OffsetPeriodo:
   414                           	opt stack 0
   415  000040                     	ds	1
   416  000041                     _UpperByte:
   417                           	opt stack 0
   418  000041                     	ds	1
   419  000042                     _ENCODER:
   420                           	opt stack 0
   421  000042                     	ds	1
   422  000043                     _LCD:
   423                           	opt stack 0
   424  000043                     	ds	1
   425  000044                     _frecuencia:
   426                           	opt stack 0
   427  000044                     	ds	2
   428                           tblptru	equ	0xFF8
   429                           tblptrh	equ	0xFF7
   430                           tblptrl	equ	0xFF6
   431                           tablat	equ	0xFF5
   432                           postinc0	equ	0xFEE
   433                           wreg	equ	0xFE8
   434                           postdec1	equ	0xFE5
   435                           fsr1l	equ	0xFE1
   436                           
   437                           	psect	cstackCOMRAM
   438  00001B                     __pcstackCOMRAM:
   439                           	opt stack 0
   440  00001B                     ?___awmod:
   441                           	opt stack 0
   442  00001B                     ?___lwdiv:
   443                           	opt stack 0
   444  00001B                     write_LCD@dato:
   445                           	opt stack 0
   446  00001B                     read_BUSY@aux:
   447                           	opt stack 0
   448  00001B                     pwm_set@duty:
   449                           	opt stack 0
   450  00001B                     aspiradora@est_asp:
   451                           	opt stack 0
   452  00001B                     luces@est_luces:
   453                           	opt stack 0
   454  00001B                     ___awmod@dividend:
   455                           	opt stack 0
   456  00001B                     ___lwdiv@dividend:
   457                           	opt stack 0
   458                           
   459                           ; 2 bytes @ 0x0
   460  00001B                     	ds	1
   461  00001C                     write_DATA@dato:
   462                           	opt stack 0
   463  00001C                     write_CMD@dato:
   464                           	opt stack 0
   465  00001C                     pwm_set@periodo:
   466                           	opt stack 0
   467                           
   468                           ; 1 bytes @ 0x1
   469  00001C                     	ds	1
   470  00001D                     char2LCD@dato:
   471                           	opt stack 0
   472  00001D                     set_CURSOR@posi:
   473                           	opt stack 0
   474  00001D                     msg2LCD@datos:
   475                           	opt stack 0
   476  00001D                     ___awmod@divisor:
   477                           	opt stack 0
   478  00001D                     ___lwdiv@divisor:
   479                           	opt stack 0
   480                           
   481                           ; 2 bytes @ 0x2
   482  00001D                     	ds	1
   483  00001E                     Crear_Caracter@linea:
   484                           	opt stack 0
   485                           
   486                           ; 2 bytes @ 0x3
   487  00001E                     	ds	1
   488  00001F                     ___awmod@counter:
   489                           	opt stack 0
   490  00001F                     ___lwdiv@quotient:
   491                           	opt stack 0
   492                           
   493                           ; 2 bytes @ 0x4
   494  00001F                     	ds	1
   495  000020                     Crear_Caracter@direccion:
   496                           	opt stack 0
   497  000020                     ___awmod@sign:
   498                           	opt stack 0
   499                           
   500                           ; 1 bytes @ 0x5
   501  000020                     	ds	1
   502  000021                     ?___awdiv:
   503                           	opt stack 0
   504  000021                     ___lwdiv@counter:
   505                           	opt stack 0
   506  000021                     Crear_Caracter@i:
   507                           	opt stack 0
   508  000021                     ___awdiv@dividend:
   509                           	opt stack 0
   510                           
   511                           ; 2 bytes @ 0x6
   512  000021                     	ds	1
   513  000022                     PWM_porcent@porcentaje:
   514                           	opt stack 0
   515                           
   516                           ; 1 bytes @ 0x7
   517  000022                     	ds	1
   518  000023                     PWM_porcent@data:
   519                           	opt stack 0
   520  000023                     ___awdiv@divisor:
   521                           	opt stack 0
   522  000023                     LCD_init@varFlecha:
   523                           	opt stack 0
   524                           
   525                           ; 7 bytes @ 0x8
   526  000023                     	ds	2
   527  000025                     ___awdiv@counter:
   528                           	opt stack 0
   529                           
   530                           ; 1 bytes @ 0xA
   531  000025                     	ds	1
   532  000026                     ___awdiv@sign:
   533                           	opt stack 0
   534                           
   535                           ; 1 bytes @ 0xB
   536  000026                     	ds	1
   537  000027                     ___awdiv@quotient:
   538                           	opt stack 0
   539                           
   540                           ; 2 bytes @ 0xC
   541  000027                     	ds	2
   542  000029                     var3LCD@datos:
   543                           	opt stack 0
   544  000029                     horaLCD@dato:
   545                           	opt stack 0
   546                           
   547                           ; 2 bytes @ 0xE
   548  000029                     	ds	2
   549  00002B                     var3LCD@cursor:
   550                           	opt stack 0
   551  00002B                     horaLCD@cursor:
   552                           	opt stack 0
   553                           
   554                           ; 1 bytes @ 0x10
   555  00002B                     	ds	1
   556  00002C                     _var3LCD$2426:
   557                           	opt stack 0
   558  00002C                     horaLCD@mensaje:
   559                           	opt stack 0
   560                           
   561                           ; 5 bytes @ 0x11
   562  00002C                     	ds	2
   563  00002E                     var3LCD@cifras:
   564                           	opt stack 0
   565                           
   566                           ; 5 bytes @ 0x13
   567  00002E                     	ds	3
   568  000031                     horaLCD@minutos:
   569                           	opt stack 0
   570                           
   571                           ; 1 bytes @ 0x16
   572  000031                     	ds	1
   573  000032                     horaLCD@segundos:
   574                           	opt stack 0
   575                           
   576                           ; 1 bytes @ 0x17
   577  000032                     	ds	1
   578  000033                     _var3LCD$2425:
   579                           	opt stack 0
   580                           
   581                           ; 2 bytes @ 0x18
   582  000033                     	ds	2
   583  000035                     tblptru	equ	0xFF8
   584                           tblptrh	equ	0xFF7
   585                           tblptrl	equ	0xFF6
   586                           tablat	equ	0xFF5
   587                           postinc0	equ	0xFEE
   588                           wreg	equ	0xFE8
   589                           postdec1	equ	0xFE5
   590                           fsr1l	equ	0xFE1
   591                           
   592                           ; 1 bytes @ 0x1A
   593 ;;
   594 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   595 ;;
   596 ;; *************** function _main *****************
   597 ;; Defined at:
   598 ;;		line 19 in file "main.c"
   599 ;; Parameters:    Size  Location     Type
   600 ;;		None
   601 ;; Auto vars:     Size  Location     Type
   602 ;;		None
   603 ;; Return value:  Size  Location     Type
   604 ;;                  1    wreg      void 
   605 ;; Registers used:
   606 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   607 ;; Tracked objects:
   608 ;;		On entry : 0/0
   609 ;;		On exit  : 0/0
   610 ;;		Unchanged: 0/0
   611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   612 ;;      Params:         0       0       0       0       0       0       0       0       0
   613 ;;      Locals:         0       0       0       0       0       0       0       0       0
   614 ;;      Temps:          0       0       0       0       0       0       0       0       0
   615 ;;      Totals:         0       0       0       0       0       0       0       0       0
   616 ;;Total ram usage:        0 bytes
   617 ;; Hardware stack levels required when called:    8
   618 ;; This function calls:
   619 ;;		_LCD_init
   620 ;;		_PicIni21
   621 ;;		_TIMER0_INI
   622 ;;		_clear_LCD
   623 ;;		_encoderIni
   624 ;;		_funtEncoder
   625 ;;		_funtLCD
   626 ;; This function is called by:
   627 ;;		Startup code after reset
   628 ;; This function uses a non-reentrant model
   629 ;;
   630                           
   631                           	psect	text0
   632  007746                     __ptext0:
   633                           	opt stack 0
   634  007746                     _main:
   635                           	opt stack 23
   636                           
   637                           ;main.c: 23: TIMER0_INI();
   638                           
   639                           ;incstack = 0
   640  007746  EC76  F03B         	call	_TIMER0_INI	;wreg free
   641                           
   642                           ;main.c: 24: T0CONbits.TMR0ON = 1;
   643  00774A  8ED5               	bsf	4053,7,c	;volatile
   644                           
   645                           ;main.c: 25: (INTCONbits.GIE = 1);
   646  00774C  8EF2               	bsf	intcon,7,c	;volatile
   647                           
   648                           ;main.c: 28: PicIni21();
   649  00774E  ECF0  F03B         	call	_PicIni21	;wreg free
   650                           
   651                           ;main.c: 30: encoderIni();
   652  007752  EC6C  F03B         	call	_encoderIni	;wreg free
   653                           
   654                           ;main.c: 33: LCD_init();
   655  007756  EC9D  F03D         	call	_LCD_init	;wreg free
   656                           
   657                           ;main.c: 34: clear_LCD();
   658  00775A  EC26  F03B         	call	_clear_LCD	;wreg free
   659  00775E                     
   660                           ;main.c: 39: funtEncoder();
   661  00775E  EC5F  F03E         	call	_funtEncoder	;wreg free
   662                           
   663                           ;main.c: 40: funtLCD();
   664  007762  ECD1  F03E         	call	_funtLCD	;wreg free
   665  007766  D7FB               	goto	l53
   666  007768                     __end_of_main:
   667                           	opt stack 0
   668                           tblptru	equ	0xFF8
   669                           tblptrh	equ	0xFF7
   670                           tblptrl	equ	0xFF6
   671                           tablat	equ	0xFF5
   672                           intcon	equ	0xFF2
   673                           postinc0	equ	0xFEE
   674                           wreg	equ	0xFE8
   675                           postdec1	equ	0xFE5
   676                           fsr1l	equ	0xFE1
   677                           
   678 ;; *************** function _funtLCD *****************
   679 ;; Defined at:
   680 ;;		line 80 in file "lcd.c"
   681 ;; Parameters:    Size  Location     Type
   682 ;;		None
   683 ;; Auto vars:     Size  Location     Type
   684 ;;		None
   685 ;; Return value:  Size  Location     Type
   686 ;;                  1    wreg      void 
   687 ;; Registers used:
   688 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   689 ;; Tracked objects:
   690 ;;		On entry : 0/0
   691 ;;		On exit  : 0/0
   692 ;;		Unchanged: 0/0
   693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   694 ;;      Params:         0       0       0       0       0       0       0       0       0
   695 ;;      Locals:         0       0       0       0       0       0       0       0       0
   696 ;;      Temps:          0       0       0       0       0       0       0       0       0
   697 ;;      Totals:         0       0       0       0       0       0       0       0       0
   698 ;;Total ram usage:        0 bytes
   699 ;; Hardware stack levels used:    1
   700 ;; Hardware stack levels required when called:    7
   701 ;; This function calls:
   702 ;;		_PWM_porcent
   703 ;;		_aspiradora
   704 ;;		_char2LCD
   705 ;;		_clear_LCD
   706 ;;		_horaLCD
   707 ;;		_luces
   708 ;;		_msg2LCD
   709 ;;		_set_CURSOR
   710 ;;		_var3LCD
   711 ;; This function is called by:
   712 ;;		_main
   713 ;; This function uses a non-reentrant model
   714 ;;
   715                           
   716                           	psect	text1
   717  007DA2                     __ptext1:
   718                           	opt stack 0
   719  007DA2                     _funtLCD:
   720                           	opt stack 23
   721                           
   722                           ;lcd.c: 82: if (LCD == ESCRIBIR) {
   723                           
   724                           ;incstack = 0
   725  007DA2  0443               	decf	_LCD,w,c
   726  007DA4  A4D8               	btfss	status,2,c
   727  007DA6  0012               	return	
   728                           
   729                           ;lcd.c: 83: clear_LCD();
   730  007DA8  EC26  F03B         	call	_clear_LCD	;wreg free
   731                           
   732                           ;lcd.c: 84: switch (MENU) {
   733  007DAC  D073               	goto	l131
   734  007DAE                     
   735                           ;lcd.c: 86: msg2LCD("   INSOLADORA");
   736  007DAE  0E25               	movlw	low STR_1
   737  007DB0  6E1D               	movwf	msg2LCD@datos,c
   738  007DB2  0E20               	movlw	high STR_1
   739  007DB4  6E1E               	movwf	msg2LCD@datos+1,c
   740  007DB6  ECC9  F03C         	call	_msg2LCD	;wreg free
   741                           
   742                           ;lcd.c: 87: horaLCD(1830, 0x46);
   743  007DBA  0E07               	movlw	7
   744  007DBC  6E2A               	movwf	horaLCD@dato+1,c
   745  007DBE  0E26               	movlw	38
   746  007DC0  6E29               	movwf	horaLCD@dato,c
   747  007DC2  0E46               	movlw	70
   748  007DC4  6E2B               	movwf	horaLCD@cursor,c
   749  007DC6  ECF7  F03D         	call	_horaLCD	;wreg free
   750                           
   751                           ;lcd.c: 88: break;
   752  007DCA  D071               	goto	l133
   753  007DCC                     
   754                           ;lcd.c: 91: msg2LCD("PWM");
   755  007DCC  0E44               	movlw	low STR_2
   756  007DCE  6E1D               	movwf	msg2LCD@datos,c
   757  007DD0  0E20               	movlw	high STR_2
   758  007DD2  6E1E               	movwf	msg2LCD@datos+1,c
   759  007DD4  ECC9  F03C         	call	_msg2LCD	;wreg free
   760                           
   761                           ;lcd.c: 92: if (boolPWM == bTRUE) {
   762  007DD8  0417               	decf	_boolPWM,w,c
   763  007DDA  A4D8               	btfss	status,2,c
   764  007DDC  D006               	goto	l135
   765                           
   766                           ;lcd.c: 93: set_CURSOR(0x40);
   767  007DDE  0E40               	movlw	64
   768  007DE0  EC49  F03B         	call	_set_CURSOR
   769                           
   770                           ;lcd.c: 94: char2LCD(0x00);
   771  007DE4  0E00               	movlw	0
   772  007DE6  EC33  F03B         	call	_char2LCD
   773  007DEA                     l135:
   774                           
   775                           ;lcd.c: 95: };lcd.c: 96: var3LCD(varPWM, 0x4A);
   776  007DEA  C007  F029         	movff	_varPWM,var3LCD@datos
   777  007DEE  C008  F02A         	movff	_varPWM+1,var3LCD@datos+1
   778  007DF2  0E4A               	movlw	74
   779  007DF4  6E2B               	movwf	var3LCD@cursor,c
   780  007DF6  EC5A  F03F         	call	_var3LCD	;wreg free
   781                           
   782                           ;lcd.c: 97: PWM_porcent(varPWM);
   783  007DFA  5007               	movf	_varPWM,w,c
   784  007DFC  ECDB  F03B         	call	_PWM_porcent
   785                           
   786                           ;lcd.c: 98: char2LCD('%');
   787  007E00  0E25               	movlw	37
   788  007E02  EC33  F03B         	call	_char2LCD
   789                           
   790                           ;lcd.c: 99: break;
   791  007E06  D053               	goto	l133
   792  007E08                     
   793                           ;lcd.c: 102: msg2LCD("ASPIRADORA");
   794  007E08  0E33               	movlw	low STR_3
   795  007E0A  6E1D               	movwf	msg2LCD@datos,c
   796  007E0C  0E20               	movlw	high STR_3
   797  007E0E  6E1E               	movwf	msg2LCD@datos+1,c
   798  007E10  ECC9  F03C         	call	_msg2LCD	;wreg free
   799                           
   800                           ;lcd.c: 103: if (boolASP == bTRUE) {
   801  007E14  0419               	decf	_boolASP,w,c
   802  007E16  A4D8               	btfss	status,2,c
   803  007E18  D00D               	goto	l137
   804                           
   805                           ;lcd.c: 104: set_CURSOR(0x4E);
   806  007E1A  0E4E               	movlw	78
   807  007E1C  EC49  F03B         	call	_set_CURSOR
   808                           
   809                           ;lcd.c: 105: msg2LCD("On");
   810  007E20  0E4C               	movlw	low STR_4
   811  007E22  6E1D               	movwf	msg2LCD@datos,c
   812  007E24  0E20               	movlw	high STR_4
   813  007E26  6E1E               	movwf	msg2LCD@datos+1,c
   814  007E28  ECC9  F03C         	call	_msg2LCD	;wreg free
   815                           
   816                           ;lcd.c: 106: aspiradora(0x1);
   817  007E2C  0E01               	movlw	1
   818  007E2E  EC5A  F03B         	call	_aspiradora
   819                           
   820                           ;lcd.c: 107: } else {
   821  007E32  D03D               	goto	l133
   822  007E34                     l137:
   823                           
   824                           ;lcd.c: 108: set_CURSOR(0x4D);
   825  007E34  0E4D               	movlw	77
   826  007E36  EC49  F03B         	call	_set_CURSOR
   827                           
   828                           ;lcd.c: 109: msg2LCD("Off");
   829  007E3A  0E48               	movlw	low STR_5
   830  007E3C  6E1D               	movwf	msg2LCD@datos,c
   831  007E3E  0E20               	movlw	high STR_5
   832  007E40  6E1E               	movwf	msg2LCD@datos+1,c
   833  007E42  ECC9  F03C         	call	_msg2LCD	;wreg free
   834                           
   835                           ;lcd.c: 110: aspiradora(0x0);
   836  007E46  0E00               	movlw	0
   837  007E48  EC5A  F03B         	call	_aspiradora
   838                           
   839                           ;lcd.c: 111: };lcd.c: 112: break;
   840  007E4C  D030               	goto	l133
   841  007E4E                     
   842                           ;lcd.c: 115: msg2LCD("LUCES");
   843  007E4E  0E3E               	movlw	low STR_6
   844  007E50  6E1D               	movwf	msg2LCD@datos,c
   845  007E52  0E20               	movlw	high STR_6
   846  007E54  6E1E               	movwf	msg2LCD@datos+1,c
   847  007E56  ECC9  F03C         	call	_msg2LCD	;wreg free
   848                           
   849                           ;lcd.c: 116: if (boolLUCES == bTRUE) {
   850  007E5A  0418               	decf	_boolLUCES,w,c
   851  007E5C  A4D8               	btfss	status,2,c
   852  007E5E  D00D               	goto	l140
   853                           
   854                           ;lcd.c: 117: set_CURSOR(0x4E);
   855  007E60  0E4E               	movlw	78
   856  007E62  EC49  F03B         	call	_set_CURSOR
   857                           
   858                           ;lcd.c: 118: msg2LCD("On");
   859  007E66  0E4C               	movlw	low STR_4
   860  007E68  6E1D               	movwf	msg2LCD@datos,c
   861  007E6A  0E20               	movlw	high STR_4
   862  007E6C  6E1E               	movwf	msg2LCD@datos+1,c
   863  007E6E  ECC9  F03C         	call	_msg2LCD	;wreg free
   864                           
   865                           ;lcd.c: 119: luces(0x1);
   866  007E72  0E01               	movlw	1
   867  007E74  EC63  F03B         	call	_luces
   868                           
   869                           ;lcd.c: 120: } else {
   870  007E78  D01A               	goto	l133
   871  007E7A                     l140:
   872                           
   873                           ;lcd.c: 121: set_CURSOR(0x4D);
   874  007E7A  0E4D               	movlw	77
   875  007E7C  EC49  F03B         	call	_set_CURSOR
   876                           
   877                           ;lcd.c: 122: msg2LCD("Off");
   878  007E80  0E48               	movlw	low STR_5
   879  007E82  6E1D               	movwf	msg2LCD@datos,c
   880  007E84  0E20               	movlw	high STR_5
   881  007E86  6E1E               	movwf	msg2LCD@datos+1,c
   882  007E88  ECC9  F03C         	call	_msg2LCD	;wreg free
   883                           
   884                           ;lcd.c: 123: luces(0x0);
   885  007E8C  0E00               	movlw	0
   886  007E8E  EC63  F03B         	call	_luces
   887                           
   888                           ;lcd.c: 126: }
   889                           
   890                           ;lcd.c: 124: };lcd.c: 125: break;
   891  007E92  D00D               	goto	l133
   892  007E94                     l131:
   893  007E94  501A               	movf	_MENU,w,c
   894                           
   895                           ; Switch size 1, requested type "space"
   896                           ; Number of cases is 4, Range of values is 0 to 3
   897                           ; switch strategies available:
   898                           ; Name         Instructions Cycles
   899                           ; simple_byte           13     7 (average)
   900                           ;	Chosen strategy is simple_byte
   901  007E96  0A00               	xorlw	0	; case 0
   902  007E98  B4D8               	btfsc	status,2,c
   903  007E9A  D789               	goto	l132
   904  007E9C  0A01               	xorlw	1	; case 1
   905  007E9E  B4D8               	btfsc	status,2,c
   906  007EA0  D795               	goto	l134
   907  007EA2  0A03               	xorlw	3	; case 2
   908  007EA4  B4D8               	btfsc	status,2,c
   909  007EA6  D7B0               	goto	l136
   910  007EA8  0A01               	xorlw	1	; case 3
   911  007EAA  B4D8               	btfsc	status,2,c
   912  007EAC  D7D0               	goto	l139
   913  007EAE                     l133:
   914                           
   915                           ;lcd.c: 127: LCD = ESPERAR;
   916  007EAE  0E00               	movlw	0
   917  007EB0  6E43               	movwf	_LCD,c
   918  007EB2  0012               	return	
   919  007EB4                     __end_of_funtLCD:
   920                           	opt stack 0
   921                           tblptru	equ	0xFF8
   922                           tblptrh	equ	0xFF7
   923                           tblptrl	equ	0xFF6
   924                           tablat	equ	0xFF5
   925                           intcon	equ	0xFF2
   926                           postinc0	equ	0xFEE
   927                           wreg	equ	0xFE8
   928                           postdec1	equ	0xFE5
   929                           fsr1l	equ	0xFE1
   930                           status	equ	0xFD8
   931                           
   932 ;; *************** function _var3LCD *****************
   933 ;; Defined at:
   934 ;;		line 29 in file "lcd.c"
   935 ;; Parameters:    Size  Location     Type
   936 ;;  datos           2   14[COMRAM] int 
   937 ;;  cursor          1   16[COMRAM] unsigned char 
   938 ;; Auto vars:     Size  Location     Type
   939 ;;  cifras          5   19[COMRAM] unsigned char [5]
   940 ;; Return value:  Size  Location     Type
   941 ;;                  1    wreg      void 
   942 ;; Registers used:
   943 ;;		wreg, status,2, status,0, cstack
   944 ;; Tracked objects:
   945 ;;		On entry : 0/0
   946 ;;		On exit  : 0/0
   947 ;;		Unchanged: 0/0
   948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   949 ;;      Params:         3       0       0       0       0       0       0       0       0
   950 ;;      Locals:         9       0       0       0       0       0       0       0       0
   951 ;;      Temps:          0       0       0       0       0       0       0       0       0
   952 ;;      Totals:        12       0       0       0       0       0       0       0       0
   953 ;;Total ram usage:       12 bytes
   954 ;; Hardware stack levels used:    1
   955 ;; Hardware stack levels required when called:    6
   956 ;; This function calls:
   957 ;;		___awdiv
   958 ;;		___awmod
   959 ;;		_char2LCD
   960 ;;		_set_CURSOR
   961 ;; This function is called by:
   962 ;;		_funtLCD
   963 ;; This function uses a non-reentrant model
   964 ;;
   965                           
   966                           	psect	text2
   967  007EB4                     __ptext2:
   968                           	opt stack 0
   969  007EB4                     _var3LCD:
   970                           	opt stack 23
   971                           
   972                           ;lcd.c: 30: unsigned char cifras[5];;lcd.c: 31: cifras[0] = (((datos % 1000) % 100) % 10
      +                          ) + 48;
   973                           
   974                           ;incstack = 0
   975  007EB4  0E03               	movlw	3
   976  007EB6  6E1E               	movwf	___awmod@divisor+1,c
   977  007EB8  0EE8               	movlw	232
   978  007EBA  6E1D               	movwf	___awmod@divisor,c
   979  007EBC  C029  F01B         	movff	var3LCD@datos,___awmod@dividend
   980  007EC0  C02A  F01C         	movff	var3LCD@datos+1,___awmod@dividend+1
   981  007EC4  EC23  F03D         	call	___awmod	;wreg free
   982  007EC8  C01B  F033         	movff	?___awmod,_var3LCD$2425
   983  007ECC  C01C  F034         	movff	?___awmod+1,_var3LCD$2425+1
   984                           
   985                           ;lcd.c: 30: unsigned char cifras[5];;lcd.c: 31: cifras[0] = (((datos % 1000) % 100) % 10
      +                          ) + 48;
   986  007ED0  0E00               	movlw	0
   987  007ED2  6E1E               	movwf	___awmod@divisor+1,c
   988  007ED4  0E64               	movlw	100
   989  007ED6  6E1D               	movwf	___awmod@divisor,c
   990  007ED8  C033  F01B         	movff	_var3LCD$2425,___awmod@dividend
   991  007EDC  C034  F01C         	movff	_var3LCD$2425+1,___awmod@dividend+1
   992  007EE0  EC23  F03D         	call	___awmod	;wreg free
   993  007EE4  C01B  F02C         	movff	?___awmod,_var3LCD$2426
   994  007EE8  C01C  F02D         	movff	?___awmod+1,_var3LCD$2426+1
   995                           
   996                           ;lcd.c: 30: unsigned char cifras[5];;lcd.c: 31: cifras[0] = (((datos % 1000) % 100) % 10
      +                          ) + 48;
   997  007EEC  C02C  F01B         	movff	_var3LCD$2426,___awmod@dividend
   998  007EF0  C02D  F01C         	movff	_var3LCD$2426+1,___awmod@dividend+1
   999  007EF4  0E00               	movlw	0
  1000  007EF6  6E1E               	movwf	___awmod@divisor+1,c
  1001  007EF8  0E0A               	movlw	10
  1002  007EFA  6E1D               	movwf	___awmod@divisor,c
  1003  007EFC  EC23  F03D         	call	___awmod	;wreg free
  1004  007F00  501B               	movf	?___awmod,w,c
  1005  007F02  0F30               	addlw	48
  1006  007F04  6E2E               	movwf	var3LCD@cifras,c
  1007                           
  1008                           ;lcd.c: 32: cifras[1] = (((datos % 1000) % 100) / 10) + 48;
  1009  007F06  0E03               	movlw	3
  1010  007F08  6E1E               	movwf	___awmod@divisor+1,c
  1011  007F0A  0EE8               	movlw	232
  1012  007F0C  6E1D               	movwf	___awmod@divisor,c
  1013  007F0E  C029  F01B         	movff	var3LCD@datos,___awmod@dividend
  1014  007F12  C02A  F01C         	movff	var3LCD@datos+1,___awmod@dividend+1
  1015  007F16  EC23  F03D         	call	___awmod	;wreg free
  1016  007F1A  C01B  F033         	movff	?___awmod,_var3LCD$2425
  1017  007F1E  C01C  F034         	movff	?___awmod+1,_var3LCD$2425+1
  1018                           
  1019                           ;lcd.c: 32: cifras[1] = (((datos % 1000) % 100) / 10) + 48;
  1020  007F22  0E00               	movlw	0
  1021  007F24  6E1E               	movwf	___awmod@divisor+1,c
  1022  007F26  0E64               	movlw	100
  1023  007F28  6E1D               	movwf	___awmod@divisor,c
  1024  007F2A  C033  F01B         	movff	_var3LCD$2425,___awmod@dividend
  1025  007F2E  C034  F01C         	movff	_var3LCD$2425+1,___awmod@dividend+1
  1026  007F32  EC23  F03D         	call	___awmod	;wreg free
  1027  007F36  C01B  F021         	movff	?___awmod,___awdiv@dividend
  1028  007F3A  C01C  F022         	movff	?___awmod+1,___awdiv@dividend+1
  1029  007F3E  0E00               	movlw	0
  1030  007F40  6E24               	movwf	___awdiv@divisor+1,c
  1031  007F42  0E0A               	movlw	10
  1032  007F44  6E23               	movwf	___awdiv@divisor,c
  1033  007F46  EC5B  F03D         	call	___awdiv	;wreg free
  1034  007F4A  5021               	movf	?___awdiv,w,c
  1035  007F4C  0F30               	addlw	48
  1036  007F4E  6E2F               	movwf	var3LCD@cifras+1,c
  1037                           
  1038                           ;lcd.c: 33: cifras[2] = ((datos % 1000) / 100) + 48;
  1039  007F50  0E03               	movlw	3
  1040  007F52  6E1E               	movwf	___awmod@divisor+1,c
  1041  007F54  0EE8               	movlw	232
  1042  007F56  6E1D               	movwf	___awmod@divisor,c
  1043  007F58  C029  F01B         	movff	var3LCD@datos,___awmod@dividend
  1044  007F5C  C02A  F01C         	movff	var3LCD@datos+1,___awmod@dividend+1
  1045  007F60  EC23  F03D         	call	___awmod	;wreg free
  1046  007F64  C01B  F021         	movff	?___awmod,___awdiv@dividend
  1047  007F68  C01C  F022         	movff	?___awmod+1,___awdiv@dividend+1
  1048  007F6C  0E00               	movlw	0
  1049  007F6E  6E24               	movwf	___awdiv@divisor+1,c
  1050  007F70  0E64               	movlw	100
  1051  007F72  6E23               	movwf	___awdiv@divisor,c
  1052  007F74  EC5B  F03D         	call	___awdiv	;wreg free
  1053  007F78  5021               	movf	?___awdiv,w,c
  1054  007F7A  0F30               	addlw	48
  1055  007F7C  6E30               	movwf	var3LCD@cifras+2,c
  1056                           
  1057                           ;lcd.c: 34: cifras[4] = (datos / 1000) + 48;
  1058  007F7E  C029  F021         	movff	var3LCD@datos,___awdiv@dividend
  1059  007F82  C02A  F022         	movff	var3LCD@datos+1,___awdiv@dividend+1
  1060  007F86  0E03               	movlw	3
  1061  007F88  6E24               	movwf	___awdiv@divisor+1,c
  1062  007F8A  0EE8               	movlw	232
  1063  007F8C  6E23               	movwf	___awdiv@divisor,c
  1064  007F8E  EC5B  F03D         	call	___awdiv	;wreg free
  1065  007F92  5021               	movf	?___awdiv,w,c
  1066  007F94  0F30               	addlw	48
  1067  007F96  6E32               	movwf	var3LCD@cifras+4,c
  1068                           
  1069                           ;lcd.c: 36: set_CURSOR(cursor);
  1070  007F98  502B               	movf	var3LCD@cursor,w,c
  1071  007F9A  EC49  F03B         	call	_set_CURSOR
  1072                           
  1073                           ;lcd.c: 38: if (datos > 999) {
  1074  007F9E  BE2A               	btfsc	var3LCD@datos+1,7,c
  1075  007FA0  D00A               	goto	l113
  1076  007FA2  0EE8               	movlw	232
  1077  007FA4  5C29               	subwf	var3LCD@datos,w,c
  1078  007FA6  0E03               	movlw	3
  1079  007FA8  582A               	subwfb	var3LCD@datos+1,w,c
  1080  007FAA  A0D8               	btfss	status,0,c
  1081  007FAC  D004               	goto	l113
  1082                           
  1083                           ;lcd.c: 39: char2LCD(cifras[4]);
  1084  007FAE  5032               	movf	var3LCD@cifras+4,w,c
  1085  007FB0  EC33  F03B         	call	_char2LCD
  1086                           
  1087                           ;lcd.c: 40: } else char2LCD(0x20);
  1088  007FB4  D003               	goto	l114
  1089  007FB6                     l113:
  1090  007FB6  0E20               	movlw	32
  1091  007FB8  EC33  F03B         	call	_char2LCD
  1092  007FBC                     l114:
  1093                           
  1094                           ;lcd.c: 42: if (datos > 99) {
  1095  007FBC  BE2A               	btfsc	var3LCD@datos+1,7,c
  1096  007FBE  D00A               	goto	l115
  1097  007FC0  502A               	movf	var3LCD@datos+1,w,c
  1098  007FC2  E104               	bnz	u1430
  1099  007FC4  0E64               	movlw	100
  1100  007FC6  5C29               	subwf	var3LCD@datos,w,c
  1101  007FC8  A0D8               	btfss	status,0,c
  1102  007FCA  D004               	goto	l115
  1103  007FCC                     u1430:
  1104                           
  1105                           ;lcd.c: 43: char2LCD(cifras[2]);
  1106  007FCC  5030               	movf	var3LCD@cifras+2,w,c
  1107  007FCE  EC33  F03B         	call	_char2LCD
  1108                           
  1109                           ;lcd.c: 44: } else char2LCD(0x20);
  1110  007FD2  D003               	goto	l116
  1111  007FD4                     l115:
  1112  007FD4  0E20               	movlw	32
  1113  007FD6  EC33  F03B         	call	_char2LCD
  1114  007FDA                     l116:
  1115                           
  1116                           ;lcd.c: 46: if (datos > 9) {
  1117  007FDA  BE2A               	btfsc	var3LCD@datos+1,7,c
  1118  007FDC  D00A               	goto	l117
  1119  007FDE  502A               	movf	var3LCD@datos+1,w,c
  1120  007FE0  E104               	bnz	u1440
  1121  007FE2  0E0A               	movlw	10
  1122  007FE4  5C29               	subwf	var3LCD@datos,w,c
  1123  007FE6  A0D8               	btfss	status,0,c
  1124  007FE8  D004               	goto	l117
  1125  007FEA                     u1440:
  1126                           
  1127                           ;lcd.c: 47: char2LCD(cifras[1]);
  1128  007FEA  502F               	movf	var3LCD@cifras+1,w,c
  1129  007FEC  EC33  F03B         	call	_char2LCD
  1130                           
  1131                           ;lcd.c: 48: } else char2LCD(0x20);
  1132  007FF0  D003               	goto	l118
  1133  007FF2                     l117:
  1134  007FF2  0E20               	movlw	32
  1135  007FF4  EC33  F03B         	call	_char2LCD
  1136  007FF8                     l118:
  1137                           
  1138                           ;lcd.c: 50: char2LCD(cifras[0]);
  1139  007FF8  502E               	movf	var3LCD@cifras,w,c
  1140  007FFA  EC33  F03B         	call	_char2LCD
  1141  007FFE  0012               	return		;funcret
  1142  008000                     __end_of_var3LCD:
  1143                           	opt stack 0
  1144                           tblptru	equ	0xFF8
  1145                           tblptrh	equ	0xFF7
  1146                           tblptrl	equ	0xFF6
  1147                           tablat	equ	0xFF5
  1148                           intcon	equ	0xFF2
  1149                           postinc0	equ	0xFEE
  1150                           wreg	equ	0xFE8
  1151                           postdec1	equ	0xFE5
  1152                           fsr1l	equ	0xFE1
  1153                           status	equ	0xFD8
  1154                           
  1155 ;; *************** function _luces *****************
  1156 ;; Defined at:
  1157 ;;		line 111 in file "Tecnica1.c"
  1158 ;; Parameters:    Size  Location     Type
  1159 ;;  est_luces       1    wreg     unsigned char 
  1160 ;; Auto vars:     Size  Location     Type
  1161 ;;  est_luces       1    0[COMRAM] unsigned char 
  1162 ;; Return value:  Size  Location     Type
  1163 ;;                  1    wreg      void 
  1164 ;; Registers used:
  1165 ;;		wreg, status,2
  1166 ;; Tracked objects:
  1167 ;;		On entry : 0/0
  1168 ;;		On exit  : 0/0
  1169 ;;		Unchanged: 0/0
  1170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1171 ;;      Params:         0       0       0       0       0       0       0       0       0
  1172 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1173 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1174 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1175 ;;Total ram usage:        1 bytes
  1176 ;; Hardware stack levels used:    1
  1177 ;; Hardware stack levels required when called:    3
  1178 ;; This function calls:
  1179 ;;		Nothing
  1180 ;; This function is called by:
  1181 ;;		_funtLCD
  1182 ;; This function uses a non-reentrant model
  1183 ;;
  1184                           
  1185                           	psect	text3
  1186  0076C6                     __ptext3:
  1187                           	opt stack 0
  1188  0076C6                     _luces:
  1189                           	opt stack 26
  1190                           
  1191                           ;incstack = 0
  1192                           ;luces@est_luces stored from wreg
  1193  0076C6  6E1B               	movwf	luces@est_luces,c
  1194                           
  1195                           ;Tecnica1.c: 112: TRISAbits.TRISA3 = 0;;
  1196  0076C8  9692               	bcf	3986,3,c	;volatile
  1197                           
  1198                           ;Tecnica1.c: 113: if(est_luces)PORTAbits.RA3 = 0x1;
  1199  0076CA  501B               	movf	luces@est_luces,w,c
  1200  0076CC  B4D8               	btfsc	status,2,c
  1201  0076CE  D002               	goto	l379
  1202  0076D0  8680               	bsf	3968,3,c	;volatile
  1203  0076D2  0012               	return	
  1204  0076D4                     l379:
  1205                           
  1206                           ;Tecnica1.c: 114: else PORTAbits.RA3 = 0x0;
  1207  0076D4  9680               	bcf	3968,3,c	;volatile
  1208  0076D6  0012               	return	
  1209  0076D8                     __end_of_luces:
  1210                           	opt stack 0
  1211                           tblptru	equ	0xFF8
  1212                           tblptrh	equ	0xFF7
  1213                           tblptrl	equ	0xFF6
  1214                           tablat	equ	0xFF5
  1215                           intcon	equ	0xFF2
  1216                           postinc0	equ	0xFEE
  1217                           wreg	equ	0xFE8
  1218                           postdec1	equ	0xFE5
  1219                           fsr1l	equ	0xFE1
  1220                           status	equ	0xFD8
  1221                           
  1222 ;; *************** function _horaLCD *****************
  1223 ;; Defined at:
  1224 ;;		line 53 in file "lcd.c"
  1225 ;; Parameters:    Size  Location     Type
  1226 ;;  dato            2   14[COMRAM] int 
  1227 ;;  cursor          1   16[COMRAM] unsigned char 
  1228 ;; Auto vars:     Size  Location     Type
  1229 ;;  mensaje         5   17[COMRAM] unsigned char [5]
  1230 ;;  segundos        1   23[COMRAM] unsigned char 
  1231 ;;  minutos         1   22[COMRAM] unsigned char 
  1232 ;; Return value:  Size  Location     Type
  1233 ;;                  1    wreg      void 
  1234 ;; Registers used:
  1235 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1236 ;; Tracked objects:
  1237 ;;		On entry : 0/0
  1238 ;;		On exit  : 0/0
  1239 ;;		Unchanged: 0/0
  1240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1241 ;;      Params:         3       0       0       0       0       0       0       0       0
  1242 ;;      Locals:         7       0       0       0       0       0       0       0       0
  1243 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1244 ;;      Totals:        10       0       0       0       0       0       0       0       0
  1245 ;;Total ram usage:       10 bytes
  1246 ;; Hardware stack levels used:    1
  1247 ;; Hardware stack levels required when called:    6
  1248 ;; This function calls:
  1249 ;;		___awdiv
  1250 ;;		___awmod
  1251 ;;		_msg2LCD
  1252 ;;		_set_CURSOR
  1253 ;; This function is called by:
  1254 ;;		_funtLCD
  1255 ;; This function uses a non-reentrant model
  1256 ;;
  1257                           
  1258                           	psect	text4
  1259  007BEE                     __ptext4:
  1260                           	opt stack 0
  1261  007BEE                     _horaLCD:
  1262                           	opt stack 23
  1263                           
  1264                           ;lcd.c: 55: unsigned char minutos = dato / 60;
  1265                           
  1266                           ;incstack = 0
  1267  007BEE  C029  F021         	movff	horaLCD@dato,___awdiv@dividend
  1268  007BF2  C02A  F022         	movff	horaLCD@dato+1,___awdiv@dividend+1
  1269  007BF6  0E00               	movlw	0
  1270  007BF8  6E24               	movwf	___awdiv@divisor+1,c
  1271  007BFA  0E3C               	movlw	60
  1272  007BFC  6E23               	movwf	___awdiv@divisor,c
  1273  007BFE  EC5B  F03D         	call	___awdiv	;wreg free
  1274  007C02  5021               	movf	?___awdiv,w,c
  1275  007C04  6E31               	movwf	horaLCD@minutos,c
  1276                           
  1277                           ;lcd.c: 56: unsigned char segundos = dato % 60;
  1278  007C06  C029  F01B         	movff	horaLCD@dato,___awmod@dividend
  1279  007C0A  C02A  F01C         	movff	horaLCD@dato+1,___awmod@dividend+1
  1280  007C0E  0E00               	movlw	0
  1281  007C10  6E1E               	movwf	___awmod@divisor+1,c
  1282  007C12  0E3C               	movlw	60
  1283  007C14  6E1D               	movwf	___awmod@divisor,c
  1284  007C16  EC23  F03D         	call	___awmod	;wreg free
  1285  007C1A  501B               	movf	?___awmod,w,c
  1286  007C1C  6E32               	movwf	horaLCD@segundos,c
  1287                           
  1288                           ;lcd.c: 58: unsigned char mensaje[5];;lcd.c: 60: mensaje[0] = ((segundos / 10) % 10) + 4
      +                          8;
  1289  007C1E  0E00               	movlw	0
  1290  007C20  6E24               	movwf	___awdiv@divisor+1,c
  1291  007C22  0E0A               	movlw	10
  1292  007C24  6E23               	movwf	___awdiv@divisor,c
  1293  007C26  C032  F021         	movff	horaLCD@segundos,___awdiv@dividend
  1294  007C2A  6A22               	clrf	___awdiv@dividend+1,c
  1295  007C2C  EC5B  F03D         	call	___awdiv	;wreg free
  1296  007C30  C021  F01B         	movff	?___awdiv,___awmod@dividend
  1297  007C34  C022  F01C         	movff	?___awdiv+1,___awmod@dividend+1
  1298  007C38  0E00               	movlw	0
  1299  007C3A  6E1E               	movwf	___awmod@divisor+1,c
  1300  007C3C  0E0A               	movlw	10
  1301  007C3E  6E1D               	movwf	___awmod@divisor,c
  1302  007C40  EC23  F03D         	call	___awmod	;wreg free
  1303  007C44  501B               	movf	?___awmod,w,c
  1304  007C46  0F30               	addlw	48
  1305  007C48  6E2C               	movwf	horaLCD@mensaje,c
  1306                           
  1307                           ;lcd.c: 61: mensaje[1] = (segundos % 10) + 48;
  1308  007C4A  C032  F01B         	movff	horaLCD@segundos,___awmod@dividend
  1309  007C4E  6A1C               	clrf	___awmod@dividend+1,c
  1310  007C50  0E00               	movlw	0
  1311  007C52  6E1E               	movwf	___awmod@divisor+1,c
  1312  007C54  0E0A               	movlw	10
  1313  007C56  6E1D               	movwf	___awmod@divisor,c
  1314  007C58  EC23  F03D         	call	___awmod	;wreg free
  1315  007C5C  501B               	movf	?___awmod,w,c
  1316  007C5E  0F30               	addlw	48
  1317  007C60  6E2D               	movwf	horaLCD@mensaje+1,c
  1318                           
  1319                           ;lcd.c: 62: mensaje[2] = 58;
  1320  007C62  0E3A               	movlw	58
  1321  007C64  6E2E               	movwf	horaLCD@mensaje+2,c
  1322                           
  1323                           ;lcd.c: 63: mensaje[3] = ((minutos / 10) % 10) + 48;
  1324  007C66  0E00               	movlw	0
  1325  007C68  6E24               	movwf	___awdiv@divisor+1,c
  1326  007C6A  0E0A               	movlw	10
  1327  007C6C  6E23               	movwf	___awdiv@divisor,c
  1328  007C6E  C031  F021         	movff	horaLCD@minutos,___awdiv@dividend
  1329  007C72  6A22               	clrf	___awdiv@dividend+1,c
  1330  007C74  EC5B  F03D         	call	___awdiv	;wreg free
  1331  007C78  C021  F01B         	movff	?___awdiv,___awmod@dividend
  1332  007C7C  C022  F01C         	movff	?___awdiv+1,___awmod@dividend+1
  1333  007C80  0E00               	movlw	0
  1334  007C82  6E1E               	movwf	___awmod@divisor+1,c
  1335  007C84  0E0A               	movlw	10
  1336  007C86  6E1D               	movwf	___awmod@divisor,c
  1337  007C88  EC23  F03D         	call	___awmod	;wreg free
  1338  007C8C  501B               	movf	?___awmod,w,c
  1339  007C8E  0F30               	addlw	48
  1340  007C90  6E2F               	movwf	horaLCD@mensaje+3,c
  1341                           
  1342                           ;lcd.c: 64: mensaje[4] = (minutos % 10) + 48;
  1343  007C92  C031  F01B         	movff	horaLCD@minutos,___awmod@dividend
  1344  007C96  6A1C               	clrf	___awmod@dividend+1,c
  1345  007C98  0E00               	movlw	0
  1346  007C9A  6E1E               	movwf	___awmod@divisor+1,c
  1347  007C9C  0E0A               	movlw	10
  1348  007C9E  6E1D               	movwf	___awmod@divisor,c
  1349  007CA0  EC23  F03D         	call	___awmod	;wreg free
  1350  007CA4  501B               	movf	?___awmod,w,c
  1351  007CA6  0F30               	addlw	48
  1352  007CA8  6E30               	movwf	horaLCD@mensaje+4,c
  1353                           
  1354                           ;lcd.c: 66: set_CURSOR(cursor);
  1355  007CAA  502B               	movf	horaLCD@cursor,w,c
  1356  007CAC  EC49  F03B         	call	_set_CURSOR
  1357                           
  1358                           ;lcd.c: 68: msg2LCD(&mensaje);
  1359  007CB0  0E2C               	movlw	low horaLCD@mensaje
  1360  007CB2  6E1D               	movwf	msg2LCD@datos,c
  1361  007CB4  0E00               	movlw	high horaLCD@mensaje
  1362  007CB6  6E1E               	movwf	msg2LCD@datos+1,c
  1363  007CB8  ECC9  F03C         	call	_msg2LCD	;wreg free
  1364  007CBC  0012               	return		;funcret
  1365  007CBE                     __end_of_horaLCD:
  1366                           	opt stack 0
  1367                           tblptru	equ	0xFF8
  1368                           tblptrh	equ	0xFF7
  1369                           tblptrl	equ	0xFF6
  1370                           tablat	equ	0xFF5
  1371                           intcon	equ	0xFF2
  1372                           postinc0	equ	0xFEE
  1373                           wreg	equ	0xFE8
  1374                           postdec1	equ	0xFE5
  1375                           fsr1l	equ	0xFE1
  1376                           status	equ	0xFD8
  1377                           
  1378 ;; *************** function _set_CURSOR *****************
  1379 ;; Defined at:
  1380 ;;		line 166 in file "lcd.c"
  1381 ;; Parameters:    Size  Location     Type
  1382 ;;  posi            1    wreg     unsigned char 
  1383 ;; Auto vars:     Size  Location     Type
  1384 ;;  posi            1    2[COMRAM] unsigned char 
  1385 ;; Return value:  Size  Location     Type
  1386 ;;                  1    wreg      void 
  1387 ;; Registers used:
  1388 ;;		wreg, status,2, status,0, cstack
  1389 ;; Tracked objects:
  1390 ;;		On entry : 0/0
  1391 ;;		On exit  : 0/0
  1392 ;;		Unchanged: 0/0
  1393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1394 ;;      Params:         0       0       0       0       0       0       0       0       0
  1395 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1396 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1397 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1398 ;;Total ram usage:        1 bytes
  1399 ;; Hardware stack levels used:    1
  1400 ;; Hardware stack levels required when called:    5
  1401 ;; This function calls:
  1402 ;;		_read_BUSY
  1403 ;;		_write_CMD
  1404 ;; This function is called by:
  1405 ;;		_var3LCD
  1406 ;;		_horaLCD
  1407 ;;		_funtLCD
  1408 ;; This function uses a non-reentrant model
  1409 ;;
  1410                           
  1411                           	psect	text5
  1412  007692                     __ptext5:
  1413                           	opt stack 0
  1414  007692                     _set_CURSOR:
  1415                           	opt stack 23
  1416                           
  1417                           ;incstack = 0
  1418                           ;set_CURSOR@posi stored from wreg
  1419  007692  6E1D               	movwf	set_CURSOR@posi,c
  1420                           
  1421                           ;lcd.c: 167: posi |= 0x80;
  1422  007694  8E1D               	bsf	set_CURSOR@posi,7,c
  1423                           
  1424                           ;lcd.c: 168: write_CMD(posi);
  1425  007696  501D               	movf	set_CURSOR@posi,w,c
  1426  007698  EC3A  F03B         	call	_write_CMD
  1427                           
  1428                           ;lcd.c: 169: read_BUSY();
  1429  00769C  ECC7  F03B         	call	_read_BUSY	;wreg free
  1430  0076A0  0012               	return		;funcret
  1431  0076A2                     __end_of_set_CURSOR:
  1432                           	opt stack 0
  1433                           tblptru	equ	0xFF8
  1434                           tblptrh	equ	0xFF7
  1435                           tblptrl	equ	0xFF6
  1436                           tablat	equ	0xFF5
  1437                           intcon	equ	0xFF2
  1438                           postinc0	equ	0xFEE
  1439                           wreg	equ	0xFE8
  1440                           postdec1	equ	0xFE5
  1441                           fsr1l	equ	0xFE1
  1442                           status	equ	0xFD8
  1443                           
  1444 ;; *************** function _msg2LCD *****************
  1445 ;; Defined at:
  1446 ;;		line 134 in file "lcd.c"
  1447 ;; Parameters:    Size  Location     Type
  1448 ;;  datos           2    2[COMRAM] PTR const unsigned char 
  1449 ;;		 -> STR_8(4), STR_7(3), STR_6(6), STR_5(4), 
  1450 ;;		 -> STR_4(3), STR_3(11), STR_2(4), STR_1(14), 
  1451 ;;		 -> horaLCD@mensaje(5), 
  1452 ;; Auto vars:     Size  Location     Type
  1453 ;;		None
  1454 ;; Return value:  Size  Location     Type
  1455 ;;                  1    wreg      void 
  1456 ;; Registers used:
  1457 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1458 ;; Tracked objects:
  1459 ;;		On entry : 0/0
  1460 ;;		On exit  : 0/0
  1461 ;;		Unchanged: 0/0
  1462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1463 ;;      Params:         2       0       0       0       0       0       0       0       0
  1464 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1465 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1466 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1467 ;;Total ram usage:        2 bytes
  1468 ;; Hardware stack levels used:    1
  1469 ;; Hardware stack levels required when called:    5
  1470 ;; This function calls:
  1471 ;;		_read_BUSY
  1472 ;;		_write_DATA
  1473 ;; This function is called by:
  1474 ;;		_horaLCD
  1475 ;;		_funtLCD
  1476 ;; This function uses a non-reentrant model
  1477 ;;
  1478                           
  1479                           	psect	text6
  1480  007992                     __ptext6:
  1481                           	opt stack 0
  1482  007992                     _msg2LCD:
  1483                           	opt stack 24
  1484                           
  1485                           ;lcd.c: 136: while (*datos != 0) {
  1486                           
  1487                           ;incstack = 0
  1488  007992  D016               	goto	l145
  1489  007994                     
  1490                           ;lcd.c: 137: write_DATA(*datos);
  1491  007994  C01D  FFF6         	movff	msg2LCD@datos,tblptrl
  1492  007998  C01E  FFF7         	movff	msg2LCD@datos+1,tblptrh
  1493  00799C  6AF8               	clrf	tblptru,c
  1494  00799E  0E07               	movlw	(high __ramtop+-1)
  1495  0079A0  64F7               	cpfsgt	tblptrh,c
  1496  0079A2  D003               	bra	u1207
  1497  0079A4  0008               	tblrd		*
  1498  0079A6  50F5               	movf	tablat,w,c
  1499  0079A8  D005               	bra	u1200
  1500  0079AA                     u1207:
  1501  0079AA  CFF6 FFE9          	movff	tblptrl,fsr0l
  1502  0079AE  CFF7 FFEA          	movff	tblptrh,fsr0h
  1503  0079B2  50EF               	movf	indf0,w,c
  1504  0079B4                     u1200:
  1505  0079B4  EC2C  F03B         	call	_write_DATA
  1506                           
  1507                           ;lcd.c: 138: read_BUSY();
  1508  0079B8  ECC7  F03B         	call	_read_BUSY	;wreg free
  1509                           
  1510                           ;lcd.c: 139: datos++;
  1511  0079BC  4A1D               	infsnz	msg2LCD@datos,f,c
  1512  0079BE  2A1E               	incf	msg2LCD@datos+1,f,c
  1513  0079C0                     l145:
  1514  0079C0  C01D  FFF6         	movff	msg2LCD@datos,tblptrl
  1515  0079C4  C01E  FFF7         	movff	msg2LCD@datos+1,tblptrh
  1516  0079C8  6AF8               	clrf	tblptru,c
  1517  0079CA  0E07               	movlw	(high __ramtop+-1)
  1518  0079CC  64F7               	cpfsgt	tblptrh,c
  1519  0079CE  D003               	bra	u1217
  1520  0079D0  0008               	tblrd		*
  1521  0079D2  50F5               	movf	tablat,w,c
  1522  0079D4  D005               	bra	u1210
  1523  0079D6                     u1217:
  1524  0079D6  CFF6 FFE9          	movff	tblptrl,fsr0l
  1525  0079DA  CFF7 FFEA          	movff	tblptrh,fsr0h
  1526  0079DE  50EF               	movf	indf0,w,c
  1527  0079E0                     u1210:
  1528  0079E0  0900               	iorlw	0
  1529  0079E2  B4D8               	btfsc	status,2,c
  1530  0079E4  0012               	return	
  1531  0079E6  D7D6               	goto	l146
  1532  0079E8                     __end_of_msg2LCD:
  1533                           	opt stack 0
  1534                           tblptru	equ	0xFF8
  1535                           tblptrh	equ	0xFF7
  1536                           tblptrl	equ	0xFF6
  1537                           tablat	equ	0xFF5
  1538                           intcon	equ	0xFF2
  1539                           indf0	equ	0xFEF
  1540                           postinc0	equ	0xFEE
  1541                           fsr0h	equ	0xFEA
  1542                           fsr0l	equ	0xFE9
  1543                           wreg	equ	0xFE8
  1544                           postdec1	equ	0xFE5
  1545                           fsr1l	equ	0xFE1
  1546                           status	equ	0xFD8
  1547                           
  1548 ;; *************** function ___awmod *****************
  1549 ;; Defined at:
  1550 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awmod.c"
  1551 ;; Parameters:    Size  Location     Type
  1552 ;;  dividend        2    0[COMRAM] int 
  1553 ;;  divisor         2    2[COMRAM] int 
  1554 ;; Auto vars:     Size  Location     Type
  1555 ;;  sign            1    5[COMRAM] unsigned char 
  1556 ;;  counter         1    4[COMRAM] unsigned char 
  1557 ;; Return value:  Size  Location     Type
  1558 ;;                  2    0[COMRAM] int 
  1559 ;; Registers used:
  1560 ;;		wreg, status,2, status,0
  1561 ;; Tracked objects:
  1562 ;;		On entry : 0/0
  1563 ;;		On exit  : 0/0
  1564 ;;		Unchanged: 0/0
  1565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1566 ;;      Params:         4       0       0       0       0       0       0       0       0
  1567 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1568 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1569 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1570 ;;Total ram usage:        6 bytes
  1571 ;; Hardware stack levels used:    1
  1572 ;; Hardware stack levels required when called:    3
  1573 ;; This function calls:
  1574 ;;		Nothing
  1575 ;; This function is called by:
  1576 ;;		_var3LCD
  1577 ;;		_horaLCD
  1578 ;; This function uses a non-reentrant model
  1579 ;;
  1580                           
  1581                           	psect	text7
  1582  007A46                     __ptext7:
  1583                           	opt stack 0
  1584  007A46                     ___awmod:
  1585                           	opt stack 25
  1586                           
  1587                           ;incstack = 0
  1588  007A46  0E00               	movlw	0
  1589  007A48  6E20               	movwf	___awmod@sign,c
  1590  007A4A  AE1C               	btfss	___awmod@dividend+1,7,c
  1591  007A4C  D006               	goto	l885
  1592  007A4E  6C1B               	negf	___awmod@dividend,c
  1593  007A50  1E1C               	comf	___awmod@dividend+1,f,c
  1594  007A52  B0D8               	btfsc	status,0,c
  1595  007A54  2A1C               	incf	___awmod@dividend+1,f,c
  1596  007A56  0E01               	movlw	1
  1597  007A58  6E20               	movwf	___awmod@sign,c
  1598  007A5A                     l885:
  1599  007A5A  AE1E               	btfss	___awmod@divisor+1,7,c
  1600  007A5C  D004               	goto	l886
  1601  007A5E  6C1D               	negf	___awmod@divisor,c
  1602  007A60  1E1E               	comf	___awmod@divisor+1,f,c
  1603  007A62  B0D8               	btfsc	status,0,c
  1604  007A64  2A1E               	incf	___awmod@divisor+1,f,c
  1605  007A66                     l886:
  1606  007A66  501D               	movf	___awmod@divisor,w,c
  1607  007A68  101E               	iorwf	___awmod@divisor+1,w,c
  1608  007A6A  B4D8               	btfsc	status,2,c
  1609  007A6C  D018               	goto	l893
  1610  007A6E  0E01               	movlw	1
  1611  007A70  6E1F               	movwf	___awmod@counter,c
  1612  007A72  D004               	goto	l888
  1613  007A74  90D8               	bcf	status,0,c
  1614  007A76  361D               	rlcf	___awmod@divisor,f,c
  1615  007A78  361E               	rlcf	___awmod@divisor+1,f,c
  1616  007A7A  2A1F               	incf	___awmod@counter,f,c
  1617  007A7C                     l888:
  1618  007A7C  AE1E               	btfss	___awmod@divisor+1,7,c
  1619  007A7E  D7FA               	goto	l889
  1620  007A80                     u1360:
  1621  007A80  501D               	movf	___awmod@divisor,w,c
  1622  007A82  5C1B               	subwf	___awmod@dividend,w,c
  1623  007A84  501E               	movf	___awmod@divisor+1,w,c
  1624  007A86  581C               	subwfb	___awmod@dividend+1,w,c
  1625  007A88  A0D8               	btfss	status,0,c
  1626  007A8A  D004               	goto	l892
  1627  007A8C  501D               	movf	___awmod@divisor,w,c
  1628  007A8E  5E1B               	subwf	___awmod@dividend,f,c
  1629  007A90  501E               	movf	___awmod@divisor+1,w,c
  1630  007A92  5A1C               	subwfb	___awmod@dividend+1,f,c
  1631  007A94                     l892:
  1632  007A94  90D8               	bcf	status,0,c
  1633  007A96  321E               	rrcf	___awmod@divisor+1,f,c
  1634  007A98  321D               	rrcf	___awmod@divisor,f,c
  1635  007A9A  2E1F               	decfsz	___awmod@counter,f,c
  1636  007A9C  D7F1               	goto	u1360
  1637  007A9E                     l893:
  1638  007A9E  5020               	movf	___awmod@sign,w,c
  1639  007AA0  B4D8               	btfsc	status,2,c
  1640  007AA2  D004               	goto	l894
  1641  007AA4  6C1B               	negf	___awmod@dividend,c
  1642  007AA6  1E1C               	comf	___awmod@dividend+1,f,c
  1643  007AA8  B0D8               	btfsc	status,0,c
  1644  007AAA  2A1C               	incf	___awmod@dividend+1,f,c
  1645  007AAC                     l894:
  1646  007AAC  C01B  F01B         	movff	___awmod@dividend,?___awmod
  1647  007AB0  C01C  F01C         	movff	___awmod@dividend+1,?___awmod+1
  1648  007AB4  0012               	return	
  1649  007AB6                     __end_of___awmod:
  1650                           	opt stack 0
  1651                           tblptru	equ	0xFF8
  1652                           tblptrh	equ	0xFF7
  1653                           tblptrl	equ	0xFF6
  1654                           tablat	equ	0xFF5
  1655                           intcon	equ	0xFF2
  1656                           indf0	equ	0xFEF
  1657                           postinc0	equ	0xFEE
  1658                           fsr0h	equ	0xFEA
  1659                           fsr0l	equ	0xFE9
  1660                           wreg	equ	0xFE8
  1661                           postdec1	equ	0xFE5
  1662                           fsr1l	equ	0xFE1
  1663                           status	equ	0xFD8
  1664                           
  1665 ;; *************** function ___awdiv *****************
  1666 ;; Defined at:
  1667 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awdiv.c"
  1668 ;; Parameters:    Size  Location     Type
  1669 ;;  dividend        2    6[COMRAM] int 
  1670 ;;  divisor         2    8[COMRAM] int 
  1671 ;; Auto vars:     Size  Location     Type
  1672 ;;  quotient        2   12[COMRAM] int 
  1673 ;;  sign            1   11[COMRAM] unsigned char 
  1674 ;;  counter         1   10[COMRAM] unsigned char 
  1675 ;; Return value:  Size  Location     Type
  1676 ;;                  2    6[COMRAM] int 
  1677 ;; Registers used:
  1678 ;;		wreg, status,2, status,0
  1679 ;; Tracked objects:
  1680 ;;		On entry : 0/0
  1681 ;;		On exit  : 0/0
  1682 ;;		Unchanged: 0/0
  1683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1684 ;;      Params:         4       0       0       0       0       0       0       0       0
  1685 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1686 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1687 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1688 ;;Total ram usage:        8 bytes
  1689 ;; Hardware stack levels used:    1
  1690 ;; Hardware stack levels required when called:    3
  1691 ;; This function calls:
  1692 ;;		Nothing
  1693 ;; This function is called by:
  1694 ;;		_var3LCD
  1695 ;;		_horaLCD
  1696 ;; This function uses a non-reentrant model
  1697 ;;
  1698                           
  1699                           	psect	text8
  1700  007AB6                     __ptext8:
  1701                           	opt stack 0
  1702  007AB6                     ___awdiv:
  1703                           	opt stack 25
  1704                           
  1705                           ;incstack = 0
  1706  007AB6  0E00               	movlw	0
  1707  007AB8  6E26               	movwf	___awdiv@sign,c
  1708  007ABA  AE24               	btfss	___awdiv@divisor+1,7,c
  1709  007ABC  D006               	goto	l872
  1710  007ABE  6C23               	negf	___awdiv@divisor,c
  1711  007AC0  1E24               	comf	___awdiv@divisor+1,f,c
  1712  007AC2  B0D8               	btfsc	status,0,c
  1713  007AC4  2A24               	incf	___awdiv@divisor+1,f,c
  1714  007AC6  0E01               	movlw	1
  1715  007AC8  6E26               	movwf	___awdiv@sign,c
  1716  007ACA                     l872:
  1717  007ACA  AE22               	btfss	___awdiv@dividend+1,7,c
  1718  007ACC  D006               	goto	l873
  1719  007ACE  6C21               	negf	___awdiv@dividend,c
  1720  007AD0  1E22               	comf	___awdiv@dividend+1,f,c
  1721  007AD2  B0D8               	btfsc	status,0,c
  1722  007AD4  2A22               	incf	___awdiv@dividend+1,f,c
  1723  007AD6  0E01               	movlw	1
  1724  007AD8  1A26               	xorwf	___awdiv@sign,f,c
  1725  007ADA                     l873:
  1726  007ADA  0E00               	movlw	0
  1727  007ADC  6E28               	movwf	___awdiv@quotient+1,c
  1728  007ADE  0E00               	movlw	0
  1729  007AE0  6E27               	movwf	___awdiv@quotient,c
  1730  007AE2  5023               	movf	___awdiv@divisor,w,c
  1731  007AE4  1024               	iorwf	___awdiv@divisor+1,w,c
  1732  007AE6  B4D8               	btfsc	status,2,c
  1733  007AE8  D01C               	goto	l880
  1734  007AEA  0E01               	movlw	1
  1735  007AEC  6E25               	movwf	___awdiv@counter,c
  1736  007AEE  D004               	goto	l875
  1737  007AF0  90D8               	bcf	status,0,c
  1738  007AF2  3623               	rlcf	___awdiv@divisor,f,c
  1739  007AF4  3624               	rlcf	___awdiv@divisor+1,f,c
  1740  007AF6  2A25               	incf	___awdiv@counter,f,c
  1741  007AF8                     l875:
  1742  007AF8  AE24               	btfss	___awdiv@divisor+1,7,c
  1743  007AFA  D7FA               	goto	l876
  1744  007AFC                     u1300:
  1745  007AFC  90D8               	bcf	status,0,c
  1746  007AFE  3627               	rlcf	___awdiv@quotient,f,c
  1747  007B00  3628               	rlcf	___awdiv@quotient+1,f,c
  1748  007B02  5023               	movf	___awdiv@divisor,w,c
  1749  007B04  5C21               	subwf	___awdiv@dividend,w,c
  1750  007B06  5024               	movf	___awdiv@divisor+1,w,c
  1751  007B08  5822               	subwfb	___awdiv@dividend+1,w,c
  1752  007B0A  A0D8               	btfss	status,0,c
  1753  007B0C  D005               	goto	l879
  1754  007B0E  5023               	movf	___awdiv@divisor,w,c
  1755  007B10  5E21               	subwf	___awdiv@dividend,f,c
  1756  007B12  5024               	movf	___awdiv@divisor+1,w,c
  1757  007B14  5A22               	subwfb	___awdiv@dividend+1,f,c
  1758  007B16  8027               	bsf	___awdiv@quotient,0,c
  1759  007B18                     l879:
  1760  007B18  90D8               	bcf	status,0,c
  1761  007B1A  3224               	rrcf	___awdiv@divisor+1,f,c
  1762  007B1C  3223               	rrcf	___awdiv@divisor,f,c
  1763  007B1E  2E25               	decfsz	___awdiv@counter,f,c
  1764  007B20  D7ED               	goto	u1300
  1765  007B22                     l880:
  1766  007B22  5026               	movf	___awdiv@sign,w,c
  1767  007B24  B4D8               	btfsc	status,2,c
  1768  007B26  D004               	goto	l881
  1769  007B28  6C27               	negf	___awdiv@quotient,c
  1770  007B2A  1E28               	comf	___awdiv@quotient+1,f,c
  1771  007B2C  B0D8               	btfsc	status,0,c
  1772  007B2E  2A28               	incf	___awdiv@quotient+1,f,c
  1773  007B30                     l881:
  1774  007B30  C027  F021         	movff	___awdiv@quotient,?___awdiv
  1775  007B34  C028  F022         	movff	___awdiv@quotient+1,?___awdiv+1
  1776  007B38  0012               	return	
  1777  007B3A                     __end_of___awdiv:
  1778                           	opt stack 0
  1779                           tblptru	equ	0xFF8
  1780                           tblptrh	equ	0xFF7
  1781                           tblptrl	equ	0xFF6
  1782                           tablat	equ	0xFF5
  1783                           intcon	equ	0xFF2
  1784                           indf0	equ	0xFEF
  1785                           postinc0	equ	0xFEE
  1786                           fsr0h	equ	0xFEA
  1787                           fsr0l	equ	0xFE9
  1788                           wreg	equ	0xFE8
  1789                           postdec1	equ	0xFE5
  1790                           fsr1l	equ	0xFE1
  1791                           status	equ	0xFD8
  1792                           
  1793 ;; *************** function _clear_LCD *****************
  1794 ;; Defined at:
  1795 ;;		line 152 in file "lcd.c"
  1796 ;; Parameters:    Size  Location     Type
  1797 ;;		None
  1798 ;; Auto vars:     Size  Location     Type
  1799 ;;		None
  1800 ;; Return value:  Size  Location     Type
  1801 ;;                  1    wreg      void 
  1802 ;; Registers used:
  1803 ;;		wreg, status,2, status,0, cstack
  1804 ;; Tracked objects:
  1805 ;;		On entry : 0/0
  1806 ;;		On exit  : 0/0
  1807 ;;		Unchanged: 0/0
  1808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1809 ;;      Params:         0       0       0       0       0       0       0       0       0
  1810 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1811 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1812 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1813 ;;Total ram usage:        0 bytes
  1814 ;; Hardware stack levels used:    1
  1815 ;; Hardware stack levels required when called:    5
  1816 ;; This function calls:
  1817 ;;		_read_BUSY
  1818 ;;		_write_CMD
  1819 ;; This function is called by:
  1820 ;;		_main
  1821 ;;		_funtLCD
  1822 ;; This function uses a non-reentrant model
  1823 ;;
  1824                           
  1825                           	psect	text9
  1826  00764C                     __ptext9:
  1827                           	opt stack 0
  1828  00764C                     _clear_LCD:
  1829                           	opt stack 24
  1830                           
  1831                           ;lcd.c: 153: write_CMD(0x01);
  1832                           
  1833                           ;incstack = 0
  1834  00764C  0E01               	movlw	1
  1835  00764E  EC3A  F03B         	call	_write_CMD
  1836                           
  1837                           ;lcd.c: 154: read_BUSY();
  1838  007652  ECC7  F03B         	call	_read_BUSY	;wreg free
  1839  007656  0012               	return		;funcret
  1840  007658                     __end_of_clear_LCD:
  1841                           	opt stack 0
  1842                           tblptru	equ	0xFF8
  1843                           tblptrh	equ	0xFF7
  1844                           tblptrl	equ	0xFF6
  1845                           tablat	equ	0xFF5
  1846                           intcon	equ	0xFF2
  1847                           indf0	equ	0xFEF
  1848                           postinc0	equ	0xFEE
  1849                           fsr0h	equ	0xFEA
  1850                           fsr0l	equ	0xFE9
  1851                           wreg	equ	0xFE8
  1852                           postdec1	equ	0xFE5
  1853                           fsr1l	equ	0xFE1
  1854                           status	equ	0xFD8
  1855                           
  1856 ;; *************** function _aspiradora *****************
  1857 ;; Defined at:
  1858 ;;		line 106 in file "Tecnica1.c"
  1859 ;; Parameters:    Size  Location     Type
  1860 ;;  est_asp         1    wreg     unsigned char 
  1861 ;; Auto vars:     Size  Location     Type
  1862 ;;  est_asp         1    0[COMRAM] unsigned char 
  1863 ;; Return value:  Size  Location     Type
  1864 ;;                  1    wreg      void 
  1865 ;; Registers used:
  1866 ;;		wreg, status,2
  1867 ;; Tracked objects:
  1868 ;;		On entry : 0/0
  1869 ;;		On exit  : 0/0
  1870 ;;		Unchanged: 0/0
  1871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1872 ;;      Params:         0       0       0       0       0       0       0       0       0
  1873 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1874 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1875 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1876 ;;Total ram usage:        1 bytes
  1877 ;; Hardware stack levels used:    1
  1878 ;; Hardware stack levels required when called:    3
  1879 ;; This function calls:
  1880 ;;		Nothing
  1881 ;; This function is called by:
  1882 ;;		_funtLCD
  1883 ;; This function uses a non-reentrant model
  1884 ;;
  1885                           
  1886                           	psect	text10
  1887  0076B4                     __ptext10:
  1888                           	opt stack 0
  1889  0076B4                     _aspiradora:
  1890                           	opt stack 26
  1891                           
  1892                           ;incstack = 0
  1893                           ;aspiradora@est_asp stored from wreg
  1894  0076B4  6E1B               	movwf	aspiradora@est_asp,c
  1895                           
  1896                           ;Tecnica1.c: 107: TRISAbits.TRISA2 = 0;;
  1897  0076B6  9492               	bcf	3986,2,c	;volatile
  1898                           
  1899                           ;Tecnica1.c: 108: if(est_asp)PORTAbits.RA2 = 0x1;
  1900  0076B8  501B               	movf	aspiradora@est_asp,w,c
  1901  0076BA  B4D8               	btfsc	status,2,c
  1902  0076BC  D002               	goto	l374
  1903  0076BE  8480               	bsf	3968,2,c	;volatile
  1904  0076C0  0012               	return	
  1905  0076C2                     l374:
  1906                           
  1907                           ;Tecnica1.c: 109: else PORTAbits.RA2 = 0x0;
  1908  0076C2  9480               	bcf	3968,2,c	;volatile
  1909  0076C4  0012               	return	
  1910  0076C6                     __end_of_aspiradora:
  1911                           	opt stack 0
  1912                           tblptru	equ	0xFF8
  1913                           tblptrh	equ	0xFF7
  1914                           tblptrl	equ	0xFF6
  1915                           tablat	equ	0xFF5
  1916                           intcon	equ	0xFF2
  1917                           indf0	equ	0xFEF
  1918                           postinc0	equ	0xFEE
  1919                           fsr0h	equ	0xFEA
  1920                           fsr0l	equ	0xFE9
  1921                           wreg	equ	0xFE8
  1922                           postdec1	equ	0xFE5
  1923                           fsr1l	equ	0xFE1
  1924                           status	equ	0xFD8
  1925                           
  1926 ;; *************** function _PWM_porcent *****************
  1927 ;; Defined at:
  1928 ;;		line 99 in file "Tecnica1.c"
  1929 ;; Parameters:    Size  Location     Type
  1930 ;;  porcentaje      1    wreg     unsigned char 
  1931 ;; Auto vars:     Size  Location     Type
  1932 ;;  porcentaje      1    7[COMRAM] unsigned char 
  1933 ;;  data            1    8[COMRAM] unsigned char 
  1934 ;; Return value:  Size  Location     Type
  1935 ;;                  1    wreg      void 
  1936 ;; Registers used:
  1937 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1938 ;; Tracked objects:
  1939 ;;		On entry : 0/0
  1940 ;;		On exit  : 0/0
  1941 ;;		Unchanged: 0/0
  1942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1943 ;;      Params:         0       0       0       0       0       0       0       0       0
  1944 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1945 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1946 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1947 ;;Total ram usage:        2 bytes
  1948 ;; Hardware stack levels used:    1
  1949 ;; Hardware stack levels required when called:    4
  1950 ;; This function calls:
  1951 ;;		___lwdiv
  1952 ;;		_pwm_set
  1953 ;; This function is called by:
  1954 ;;		_funtLCD
  1955 ;; This function uses a non-reentrant model
  1956 ;;
  1957                           
  1958                           	psect	text11
  1959  0077B6                     __ptext11:
  1960                           	opt stack 0
  1961  0077B6                     _PWM_porcent:
  1962                           	opt stack 25
  1963                           
  1964                           ;incstack = 0
  1965                           ;PWM_porcent@porcentaje stored from wreg
  1966  0077B6  6E22               	movwf	PWM_porcent@porcentaje,c
  1967                           
  1968                           ;Tecnica1.c: 100: unsigned char data;;Tecnica1.c: 102: data = (unsigned int)(porcentaje 
      +                          * 200) / 100;
  1969  0077B8  5022               	movf	PWM_porcent@porcentaje,w,c
  1970  0077BA  0DC8               	mullw	200
  1971  0077BC  CFF3 F01B          	movff	prodl,___lwdiv@dividend
  1972  0077C0  CFF4 F01C          	movff	prodh,___lwdiv@dividend+1
  1973  0077C4  0E00               	movlw	0
  1974  0077C6  6E1E               	movwf	___lwdiv@divisor+1,c
  1975  0077C8  0E64               	movlw	100
  1976  0077CA  6E1D               	movwf	___lwdiv@divisor,c
  1977  0077CC  ECA0  F03C         	call	___lwdiv	;wreg free
  1978  0077D0  501B               	movf	?___lwdiv,w,c
  1979  0077D2  6E23               	movwf	PWM_porcent@data,c
  1980                           
  1981                           ;Tecnica1.c: 103: pwm_set(200, data);
  1982  0077D4  C023  F01B         	movff	PWM_porcent@data,pwm_set@duty
  1983  0077D8  0EC8               	movlw	200
  1984  0077DA  ECB4  F03B         	call	_pwm_set
  1985  0077DE  0012               	return		;funcret
  1986  0077E0                     __end_of_PWM_porcent:
  1987                           	opt stack 0
  1988                           tblptru	equ	0xFF8
  1989                           tblptrh	equ	0xFF7
  1990                           tblptrl	equ	0xFF6
  1991                           tablat	equ	0xFF5
  1992                           prodh	equ	0xFF4
  1993                           prodl	equ	0xFF3
  1994                           intcon	equ	0xFF2
  1995                           indf0	equ	0xFEF
  1996                           postinc0	equ	0xFEE
  1997                           fsr0h	equ	0xFEA
  1998                           fsr0l	equ	0xFE9
  1999                           wreg	equ	0xFE8
  2000                           postdec1	equ	0xFE5
  2001                           fsr1l	equ	0xFE1
  2002                           status	equ	0xFD8
  2003                           
  2004 ;; *************** function _pwm_set *****************
  2005 ;; Defined at:
  2006 ;;		line 90 in file "Tecnica1.c"
  2007 ;; Parameters:    Size  Location     Type
  2008 ;;  periodo         1    wreg     unsigned char 
  2009 ;;  duty            1    0[COMRAM] unsigned char 
  2010 ;; Auto vars:     Size  Location     Type
  2011 ;;  periodo         1    1[COMRAM] unsigned char 
  2012 ;; Return value:  Size  Location     Type
  2013 ;;                  1    wreg      void 
  2014 ;; Registers used:
  2015 ;;		wreg, status,2, status,0
  2016 ;; Tracked objects:
  2017 ;;		On entry : 0/0
  2018 ;;		On exit  : 0/0
  2019 ;;		Unchanged: 0/0
  2020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2021 ;;      Params:         1       0       0       0       0       0       0       0       0
  2022 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2023 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2024 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2025 ;;Total ram usage:        2 bytes
  2026 ;; Hardware stack levels used:    1
  2027 ;; Hardware stack levels required when called:    3
  2028 ;; This function calls:
  2029 ;;		Nothing
  2030 ;; This function is called by:
  2031 ;;		_PWM_porcent
  2032 ;; This function uses a non-reentrant model
  2033 ;;
  2034                           
  2035                           	psect	text12
  2036  007768                     __ptext12:
  2037                           	opt stack 0
  2038  007768                     _pwm_set:
  2039                           	opt stack 25
  2040                           
  2041                           ;incstack = 0
  2042                           ;pwm_set@periodo stored from wreg
  2043  007768  6E1C               	movwf	pwm_set@periodo,c
  2044                           
  2045                           ;Tecnica1.c: 92: if (duty > 0 && duty != CCPR1L)CCPR1L = duty;
  2046  00776A  501B               	movf	pwm_set@duty,w,c
  2047  00776C  B4D8               	btfsc	status,2,c
  2048  00776E  D005               	goto	l366
  2049  007770  50BE               	movf	4030,w,c	;volatile
  2050  007772  181B               	xorwf	pwm_set@duty,w,c
  2051  007774  A4D8               	btfss	status,2,c
  2052  007776  C01B  FFBE         	movff	pwm_set@duty,4030	;volatile
  2053  00777A                     l366:
  2054                           
  2055                           ;Tecnica1.c: 93: if (periodo > 0 && periodo != PR2)PR2 = periodo;
  2056  00777A  501C               	movf	pwm_set@periodo,w,c
  2057  00777C  B4D8               	btfsc	status,2,c
  2058  00777E  0012               	return	
  2059  007780  50CB               	movf	4043,w,c	;volatile
  2060  007782  181C               	xorwf	pwm_set@periodo,w,c
  2061  007784  B4D8               	btfsc	status,2,c
  2062  007786  0012               	return	
  2063  007788  C01C  FFCB         	movff	pwm_set@periodo,4043	;volatile
  2064  00778C  0012               	return	
  2065  00778E                     __end_of_pwm_set:
  2066                           	opt stack 0
  2067                           tblptru	equ	0xFF8
  2068                           tblptrh	equ	0xFF7
  2069                           tblptrl	equ	0xFF6
  2070                           tablat	equ	0xFF5
  2071                           prodh	equ	0xFF4
  2072                           prodl	equ	0xFF3
  2073                           intcon	equ	0xFF2
  2074                           indf0	equ	0xFEF
  2075                           postinc0	equ	0xFEE
  2076                           fsr0h	equ	0xFEA
  2077                           fsr0l	equ	0xFE9
  2078                           wreg	equ	0xFE8
  2079                           postdec1	equ	0xFE5
  2080                           fsr1l	equ	0xFE1
  2081                           status	equ	0xFD8
  2082                           
  2083 ;; *************** function ___lwdiv *****************
  2084 ;; Defined at:
  2085 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwdiv.c"
  2086 ;; Parameters:    Size  Location     Type
  2087 ;;  dividend        2    0[COMRAM] unsigned int 
  2088 ;;  divisor         2    2[COMRAM] unsigned int 
  2089 ;; Auto vars:     Size  Location     Type
  2090 ;;  quotient        2    4[COMRAM] unsigned int 
  2091 ;;  counter         1    6[COMRAM] unsigned char 
  2092 ;; Return value:  Size  Location     Type
  2093 ;;                  2    0[COMRAM] unsigned int 
  2094 ;; Registers used:
  2095 ;;		wreg, status,2, status,0
  2096 ;; Tracked objects:
  2097 ;;		On entry : 0/0
  2098 ;;		On exit  : 0/0
  2099 ;;		Unchanged: 0/0
  2100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2101 ;;      Params:         4       0       0       0       0       0       0       0       0
  2102 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2103 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2104 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2105 ;;Total ram usage:        7 bytes
  2106 ;; Hardware stack levels used:    1
  2107 ;; Hardware stack levels required when called:    3
  2108 ;; This function calls:
  2109 ;;		Nothing
  2110 ;; This function is called by:
  2111 ;;		_PWM_porcent
  2112 ;; This function uses a non-reentrant model
  2113 ;;
  2114                           
  2115                           	psect	text13
  2116  007940                     __ptext13:
  2117                           	opt stack 0
  2118  007940                     ___lwdiv:
  2119                           	opt stack 25
  2120                           
  2121                           ;incstack = 0
  2122  007940  0E00               	movlw	0
  2123  007942  6E20               	movwf	___lwdiv@quotient+1,c
  2124  007944  0E00               	movlw	0
  2125  007946  6E1F               	movwf	___lwdiv@quotient,c
  2126  007948  501D               	movf	___lwdiv@divisor,w,c
  2127  00794A  101E               	iorwf	___lwdiv@divisor+1,w,c
  2128  00794C  B4D8               	btfsc	status,2,c
  2129  00794E  D01C               	goto	l1136
  2130  007950  0E01               	movlw	1
  2131  007952  6E21               	movwf	___lwdiv@counter,c
  2132  007954  D004               	goto	l1131
  2133  007956  90D8               	bcf	status,0,c
  2134  007958  361D               	rlcf	___lwdiv@divisor,f,c
  2135  00795A  361E               	rlcf	___lwdiv@divisor+1,f,c
  2136  00795C  2A21               	incf	___lwdiv@counter,f,c
  2137  00795E                     l1131:
  2138  00795E  AE1E               	btfss	___lwdiv@divisor+1,7,c
  2139  007960  D7FA               	goto	l1132
  2140  007962                     u1400:
  2141  007962  90D8               	bcf	status,0,c
  2142  007964  361F               	rlcf	___lwdiv@quotient,f,c
  2143  007966  3620               	rlcf	___lwdiv@quotient+1,f,c
  2144  007968  501D               	movf	___lwdiv@divisor,w,c
  2145  00796A  5C1B               	subwf	___lwdiv@dividend,w,c
  2146  00796C  501E               	movf	___lwdiv@divisor+1,w,c
  2147  00796E  581C               	subwfb	___lwdiv@dividend+1,w,c
  2148  007970  A0D8               	btfss	status,0,c
  2149  007972  D005               	goto	l1135
  2150  007974  501D               	movf	___lwdiv@divisor,w,c
  2151  007976  5E1B               	subwf	___lwdiv@dividend,f,c
  2152  007978  501E               	movf	___lwdiv@divisor+1,w,c
  2153  00797A  5A1C               	subwfb	___lwdiv@dividend+1,f,c
  2154  00797C  801F               	bsf	___lwdiv@quotient,0,c
  2155  00797E                     l1135:
  2156  00797E  90D8               	bcf	status,0,c
  2157  007980  321E               	rrcf	___lwdiv@divisor+1,f,c
  2158  007982  321D               	rrcf	___lwdiv@divisor,f,c
  2159  007984  2E21               	decfsz	___lwdiv@counter,f,c
  2160  007986  D7ED               	goto	u1400
  2161  007988                     l1136:
  2162  007988  C01F  F01B         	movff	___lwdiv@quotient,?___lwdiv
  2163  00798C  C020  F01C         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2164  007990  0012               	return		;funcret
  2165  007992                     __end_of___lwdiv:
  2166                           	opt stack 0
  2167                           tblptru	equ	0xFF8
  2168                           tblptrh	equ	0xFF7
  2169                           tblptrl	equ	0xFF6
  2170                           tablat	equ	0xFF5
  2171                           prodh	equ	0xFF4
  2172                           prodl	equ	0xFF3
  2173                           intcon	equ	0xFF2
  2174                           indf0	equ	0xFEF
  2175                           postinc0	equ	0xFEE
  2176                           fsr0h	equ	0xFEA
  2177                           fsr0l	equ	0xFE9
  2178                           wreg	equ	0xFE8
  2179                           postdec1	equ	0xFE5
  2180                           fsr1l	equ	0xFE1
  2181                           status	equ	0xFD8
  2182                           
  2183 ;; *************** function _funtEncoder *****************
  2184 ;; Defined at:
  2185 ;;		line 120 in file "EncoderIncremental.c"
  2186 ;; Parameters:    Size  Location     Type
  2187 ;;		None
  2188 ;; Auto vars:     Size  Location     Type
  2189 ;;		None
  2190 ;; Return value:  Size  Location     Type
  2191 ;;                  1    wreg      void 
  2192 ;; Registers used:
  2193 ;;		wreg, status,2, status,0, cstack
  2194 ;; Tracked objects:
  2195 ;;		On entry : 0/0
  2196 ;;		On exit  : 0/0
  2197 ;;		Unchanged: 0/0
  2198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2199 ;;      Params:         0       0       0       0       0       0       0       0       0
  2200 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2201 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2202 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2203 ;;Total ram usage:        0 bytes
  2204 ;; Hardware stack levels used:    1
  2205 ;; Hardware stack levels required when called:    4
  2206 ;; This function calls:
  2207 ;;		_funtMENUSW
  2208 ;; This function is called by:
  2209 ;;		_main
  2210 ;; This function uses a non-reentrant model
  2211 ;;
  2212                           
  2213                           	psect	text14
  2214  007CBE                     __ptext14:
  2215                           	opt stack 0
  2216  007CBE                     _funtEncoder:
  2217                           	opt stack 26
  2218                           
  2219                           ;EncoderIncremental.c: 122: if (Flag_RB0 && Flag_RB1) {
  2220                           
  2221                           ;incstack = 0
  2222  007CBE  500E               	movf	_Flag_RB0,w,c
  2223  007CC0  B4D8               	btfsc	status,2,c
  2224  007CC2  D061               	goto	l548
  2225  007CC4  500D               	movf	_Flag_RB1,w,c
  2226  007CC6  A4D8               	btfss	status,2,c
  2227  007CC8  D031               	goto	l536
  2228  007CCA  D05D               	goto	l548
  2229  007CCC                     
  2230                           ;EncoderIncremental.c: 125: ENCODER = RELEASE;
  2231  007CCC  0E03               	movlw	3
  2232  007CCE  6E42               	movwf	_ENCODER,c
  2233                           
  2234                           ;EncoderIncremental.c: 126: LCD = ESCRIBIR;
  2235  007CD0  0E01               	movlw	1
  2236  007CD2  6E43               	movwf	_LCD,c
  2237                           
  2238                           ;EncoderIncremental.c: 128: if (boolPWM == bTRUE) {
  2239  007CD4  0417               	decf	_boolPWM,w,c
  2240  007CD6  A4D8               	btfss	status,2,c
  2241  007CD8  D00B               	goto	l538
  2242                           
  2243                           ;EncoderIncremental.c: 129: if (varPWM > 0) {
  2244  007CDA  BE08               	btfsc	_varPWM+1,7,c
  2245  007CDC  D054               	goto	l548
  2246  007CDE  5008               	movf	_varPWM+1,w,c
  2247  007CE0  E103               	bnz	u500
  2248  007CE2  0407               	decf	_varPWM,w,c
  2249  007CE4  A0D8               	btfss	status,0,c
  2250  007CE6  D04F               	goto	l548
  2251  007CE8                     u500:
  2252                           
  2253                           ;EncoderIncremental.c: 130: varPWM -= 5;
  2254  007CE8  0EFB               	movlw	251
  2255  007CEA  2607               	addwf	_varPWM,f,c
  2256  007CEC  0EFF               	movlw	255
  2257  007CEE  D017               	goto	L1
  2258  007CF0                     l538:
  2259  007CF0  501A               	movf	_MENU,w,c
  2260  007CF2  B4D8               	btfsc	status,2,c
  2261  007CF4  D048               	goto	l548
  2262  007CF6  061A               	decf	_MENU,f,c
  2263                           
  2264                           ;EncoderIncremental.c: 134: break;
  2265  007CF8  D046               	goto	l548
  2266  007CFA                     
  2267                           ;EncoderIncremental.c: 137: ENCODER = RELEASE;
  2268  007CFA  0E03               	movlw	3
  2269  007CFC  6E42               	movwf	_ENCODER,c
  2270                           
  2271                           ;EncoderIncremental.c: 138: LCD = ESCRIBIR;
  2272  007CFE  0E01               	movlw	1
  2273  007D00  6E43               	movwf	_LCD,c
  2274                           
  2275                           ;EncoderIncremental.c: 140: if (boolPWM == bTRUE) {
  2276  007D02  0417               	decf	_boolPWM,w,c
  2277  007D04  A4D8               	btfss	status,2,c
  2278  007D06  D00D               	goto	l544
  2279                           
  2280                           ;EncoderIncremental.c: 141: if (varPWM < 100) {
  2281  007D08  BE08               	btfsc	_varPWM+1,7,c
  2282  007D0A  D006               	goto	u530
  2283  007D0C  5008               	movf	_varPWM+1,w,c
  2284  007D0E  E13B               	bnz	l1808
  2285  007D10  0E64               	movlw	100
  2286  007D12  5C07               	subwf	_varPWM,w,c
  2287  007D14  B0D8               	btfsc	status,0,c
  2288  007D16  D037               	goto	l548
  2289  007D18                     u530:
  2290                           
  2291                           ;EncoderIncremental.c: 142: varPWM += 5;
  2292  007D18  0E05               	movlw	5
  2293  007D1A  2607               	addwf	_varPWM,f,c
  2294  007D1C  0E00               	movlw	0
  2295  007D1E                     L1:
  2296  007D1E  2208               	addwfc	_varPWM+1,f,c
  2297                           
  2298                           ;EncoderIncremental.c: 143: };EncoderIncremental.c: 144: } else if (MENU < 3)MENU++;
  2299  007D20  D032               	goto	l548
  2300  007D22                     l544:
  2301  007D22  0E03               	movlw	3
  2302  007D24  601A               	cpfslt	_MENU,c
  2303  007D26  D02F               	goto	l548
  2304  007D28  2A1A               	incf	_MENU,f,c
  2305                           
  2306                           ;EncoderIncremental.c: 147: }
  2307                           
  2308                           ;EncoderIncremental.c: 146: break;
  2309  007D2A  D02D               	goto	l548
  2310  007D2C                     l536:
  2311  007D2C  5042               	movf	_ENCODER,w,c
  2312                           
  2313                           ; Switch size 1, requested type "space"
  2314                           ; Number of cases is 2, Range of values is 0 to 1
  2315                           ; switch strategies available:
  2316                           ; Name         Instructions Cycles
  2317                           ; simple_byte            7     4 (average)
  2318                           ;	Chosen strategy is simple_byte
  2319  007D2E  0A00               	xorlw	0	; case 0
  2320  007D30  B4D8               	btfsc	status,2,c
  2321  007D32  D7CC               	goto	l537
  2322  007D34  0A01               	xorlw	1	; case 1
  2323  007D36  B4D8               	btfsc	status,2,c
  2324  007D38  D7E0               	goto	l543
  2325                           
  2326                           ;EncoderIncremental.c: 148: };EncoderIncremental.c: 153: switch (EncoderSW) {
  2327  007D3A  D025               	goto	l548
  2328  007D3C                     l549:
  2329                           
  2330                           ;EncoderIncremental.c: 155: if (!PORTAbits.RA5) {
  2331  007D3C  BA80               	btfsc	3968,5,c	;volatile
  2332  007D3E  0012               	return	
  2333                           
  2334                           ;EncoderIncremental.c: 156: EncoderSW = FALLINGSW;
  2335  007D40  0E03               	movlw	3
  2336  007D42  6E3E               	movwf	_EncoderSW,c
  2337                           
  2338                           ;EncoderIncremental.c: 157: varEncoderSW = 30;
  2339  007D44  0E1E               	movlw	30
  2340  007D46  6E15               	movwf	_varEncoderSW,c
  2341                           
  2342                           ;EncoderIncremental.c: 158: };EncoderIncremental.c: 159: break;
  2343  007D48  0012               	return	
  2344  007D4A                     l552:
  2345                           
  2346                           ;EncoderIncremental.c: 161: if (!PORTAbits.RA5) {
  2347  007D4A  BA80               	btfsc	3968,5,c	;volatile
  2348  007D4C  D008               	goto	l553
  2349                           
  2350                           ;EncoderIncremental.c: 162: if (varEncoderSW == 0) {
  2351  007D4E  5015               	movf	_varEncoderSW,w,c
  2352  007D50  A4D8               	btfss	status,2,c
  2353  007D52  0012               	return	
  2354                           
  2355                           ;EncoderIncremental.c: 165: funtMENUSW();
  2356  007D54  ECF4  F03C         	call	_funtMENUSW	;wreg free
  2357                           
  2358                           ;EncoderIncremental.c: 168: EncoderSW = DOWNSW;
  2359  007D58  0E01               	movlw	1
  2360  007D5A  6E3E               	movwf	_EncoderSW,c
  2361                           
  2362                           ;EncoderIncremental.c: 169: };EncoderIncremental.c: 170: } else EncoderSW = UPSW;
  2363  007D5C  0012               	return	
  2364  007D5E                     l553:
  2365  007D5E  0E00               	movlw	0
  2366  007D60  6E3E               	movwf	_EncoderSW,c
  2367                           
  2368                           ;EncoderIncremental.c: 171: break;
  2369  007D62  0012               	return	
  2370  007D64                     l556:
  2371                           
  2372                           ;EncoderIncremental.c: 173: if (PORTAbits.RA5) {
  2373  007D64  AA80               	btfss	3968,5,c	;volatile
  2374  007D66  D004               	goto	l557
  2375                           
  2376                           ;EncoderIncremental.c: 174: EncoderSW = RELEASESW;
  2377  007D68  0E02               	movlw	2
  2378  007D6A  6E3E               	movwf	_EncoderSW,c
  2379                           
  2380                           ;EncoderIncremental.c: 175: varEncoderSW = 30;
  2381  007D6C  0E1E               	movlw	30
  2382  007D6E  6E15               	movwf	_varEncoderSW,c
  2383  007D70                     l557:
  2384                           
  2385                           ;EncoderIncremental.c: 178: if (PORTAbits.RA5) {
  2386                           
  2387                           ;EncoderIncremental.c: 176: };EncoderIncremental.c: 177: case RELEASESW:
  2388  007D70  AA80               	btfss	3968,5,c	;volatile
  2389  007D72  D006               	goto	l559
  2390                           
  2391                           ;EncoderIncremental.c: 179: if (varEncoderSW == 0) {
  2392  007D74  5015               	movf	_varEncoderSW,w,c
  2393  007D76  A4D8               	btfss	status,2,c
  2394  007D78  0012               	return	
  2395                           
  2396                           ;EncoderIncremental.c: 180: EncoderSW = UPSW;
  2397  007D7A  0E00               	movlw	0
  2398  007D7C  6E3E               	movwf	_EncoderSW,c
  2399                           
  2400                           ;EncoderIncremental.c: 181: };EncoderIncremental.c: 182: } else EncoderSW = DOWNSW;
  2401  007D7E  0012               	return	
  2402  007D80                     l559:
  2403  007D80  0E01               	movlw	1
  2404  007D82  6E3E               	movwf	_EncoderSW,c
  2405                           
  2406                           ;EncoderIncremental.c: 185: }
  2407                           
  2408                           ;EncoderIncremental.c: 184: break;
  2409  007D84  0012               	return	
  2410  007D86                     l548:
  2411  007D86                     l1808:
  2412  007D86  503E               	movf	_EncoderSW,w,c
  2413                           
  2414                           ; Switch size 1, requested type "space"
  2415                           ; Number of cases is 4, Range of values is 0 to 3
  2416                           ; switch strategies available:
  2417                           ; Name         Instructions Cycles
  2418                           ; simple_byte           13     7 (average)
  2419                           ;	Chosen strategy is simple_byte
  2420  007D88  0A00               	xorlw	0	; case 0
  2421  007D8A  B4D8               	btfsc	status,2,c
  2422  007D8C  D7D7               	goto	l549
  2423  007D8E  0A01               	xorlw	1	; case 1
  2424  007D90  B4D8               	btfsc	status,2,c
  2425  007D92  D7E8               	goto	l556
  2426  007D94  0A03               	xorlw	3	; case 2
  2427  007D96  B4D8               	btfsc	status,2,c
  2428  007D98  D7EB               	goto	l557
  2429  007D9A  0A01               	xorlw	1	; case 3
  2430  007D9C  A4D8               	btfss	status,2,c
  2431  007D9E  0012               	return	
  2432  007DA0  D7D4               	goto	l552
  2433  007DA2                     __end_of_funtEncoder:
  2434                           	opt stack 0
  2435                           tblptru	equ	0xFF8
  2436                           tblptrh	equ	0xFF7
  2437                           tblptrl	equ	0xFF6
  2438                           tablat	equ	0xFF5
  2439                           prodh	equ	0xFF4
  2440                           prodl	equ	0xFF3
  2441                           intcon	equ	0xFF2
  2442                           indf0	equ	0xFEF
  2443                           postinc0	equ	0xFEE
  2444                           fsr0h	equ	0xFEA
  2445                           fsr0l	equ	0xFE9
  2446                           wreg	equ	0xFE8
  2447                           postdec1	equ	0xFE5
  2448                           fsr1l	equ	0xFE1
  2449                           status	equ	0xFD8
  2450                           
  2451 ;; *************** function _funtMENUSW *****************
  2452 ;; Defined at:
  2453 ;;		line 189 in file "EncoderIncremental.c"
  2454 ;; Parameters:    Size  Location     Type
  2455 ;;		None
  2456 ;; Auto vars:     Size  Location     Type
  2457 ;;		None
  2458 ;; Return value:  Size  Location     Type
  2459 ;;                  1    wreg      void 
  2460 ;; Registers used:
  2461 ;;		wreg, status,2, status,0
  2462 ;; Tracked objects:
  2463 ;;		On entry : 0/0
  2464 ;;		On exit  : 0/0
  2465 ;;		Unchanged: 0/0
  2466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2467 ;;      Params:         0       0       0       0       0       0       0       0       0
  2468 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2469 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2470 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2471 ;;Total ram usage:        0 bytes
  2472 ;; Hardware stack levels used:    1
  2473 ;; Hardware stack levels required when called:    3
  2474 ;; This function calls:
  2475 ;;		Nothing
  2476 ;; This function is called by:
  2477 ;;		_funtEncoder
  2478 ;; This function uses a non-reentrant model
  2479 ;;
  2480                           
  2481                           	psect	text15
  2482  0079E8                     __ptext15:
  2483                           	opt stack 0
  2484  0079E8                     _funtMENUSW:
  2485                           	opt stack 26
  2486                           
  2487                           ;EncoderIncremental.c: 190: switch (MENU) {
  2488                           
  2489                           ;incstack = 0
  2490  0079E8  D023               	goto	l565
  2491  0079EA                     
  2492                           ;EncoderIncremental.c: 192: if (boolPWM) {
  2493  0079EA  5017               	movf	_boolPWM,w,c
  2494  0079EC  B4D8               	btfsc	status,2,c
  2495  0079EE  D002               	goto	l567
  2496                           
  2497                           ;EncoderIncremental.c: 193: boolPWM = bFALSE;
  2498  0079F0  0E00               	movlw	0
  2499  0079F2  D001               	goto	L2
  2500  0079F4                     l567:
  2501  0079F4  0E01               	movlw	1
  2502  0079F6                     L2:
  2503  0079F6  6E17               	movwf	_boolPWM,c
  2504                           
  2505                           ;EncoderIncremental.c: 195: LCD = ESCRIBIR;
  2506  0079F8  0E01               	movlw	1
  2507  0079FA  6E43               	movwf	_LCD,c
  2508                           
  2509                           ;EncoderIncremental.c: 196: break;
  2510  0079FC  0012               	return	
  2511  0079FE                     
  2512                           ;EncoderIncremental.c: 198: if (boolASP) {
  2513  0079FE  5019               	movf	_boolASP,w,c
  2514  007A00  B4D8               	btfsc	status,2,c
  2515  007A02  D002               	goto	l571
  2516                           
  2517                           ;EncoderIncremental.c: 199: boolASP = bFALSE;
  2518  007A04  0E00               	movlw	0
  2519  007A06  D001               	goto	L3
  2520  007A08                     l571:
  2521  007A08  0E01               	movlw	1
  2522  007A0A                     L3:
  2523  007A0A  6E19               	movwf	_boolASP,c
  2524                           
  2525                           ;EncoderIncremental.c: 201: LCD = ESCRIBIR;
  2526  007A0C  0E01               	movlw	1
  2527  007A0E  6E43               	movwf	_LCD,c
  2528                           
  2529                           ;EncoderIncremental.c: 202: break;
  2530  007A10  0012               	return	
  2531  007A12                     
  2532                           ;EncoderIncremental.c: 204: if (boolLUCES) {
  2533  007A12  5018               	movf	_boolLUCES,w,c
  2534  007A14  B4D8               	btfsc	status,2,c
  2535  007A16  D002               	goto	l574
  2536                           
  2537                           ;EncoderIncremental.c: 205: boolLUCES = bFALSE;
  2538  007A18  0E00               	movlw	0
  2539  007A1A  D001               	goto	L4
  2540  007A1C                     l574:
  2541  007A1C  0E01               	movlw	1
  2542  007A1E                     L4:
  2543  007A1E  6E18               	movwf	_boolLUCES,c
  2544                           
  2545                           ;EncoderIncremental.c: 207: LCD = ESCRIBIR;
  2546  007A20  0E01               	movlw	1
  2547  007A22  6E43               	movwf	_LCD,c
  2548                           
  2549                           ;EncoderIncremental.c: 208: break;
  2550  007A24  0012               	return	
  2551  007A26                     
  2552                           ;EncoderIncremental.c: 210: MENU = PWM;
  2553  007A26  0E01               	movlw	1
  2554  007A28  6E1A               	movwf	_MENU,c
  2555                           
  2556                           ;EncoderIncremental.c: 211: LCD = ESCRIBIR;
  2557  007A2A  0E01               	movlw	1
  2558  007A2C  6E43               	movwf	_LCD,c
  2559                           
  2560                           ;EncoderIncremental.c: 212: }
  2561  007A2E  0012               	return	
  2562  007A30                     l565:
  2563  007A30  501A               	movf	_MENU,w,c
  2564                           
  2565                           ; Switch size 1, requested type "space"
  2566                           ; Number of cases is 3, Range of values is 1 to 3
  2567                           ; switch strategies available:
  2568                           ; Name         Instructions Cycles
  2569                           ; simple_byte           10     6 (average)
  2570                           ;	Chosen strategy is simple_byte
  2571  007A32  0A01               	xorlw	1	; case 1
  2572  007A34  B4D8               	btfsc	status,2,c
  2573  007A36  D7D9               	goto	l566
  2574  007A38  0A03               	xorlw	3	; case 2
  2575  007A3A  B4D8               	btfsc	status,2,c
  2576  007A3C  D7E0               	goto	l570
  2577  007A3E  0A01               	xorlw	1	; case 3
  2578  007A40  B4D8               	btfsc	status,2,c
  2579  007A42  D7E7               	goto	l573
  2580  007A44  D7F0               	goto	l576
  2581  007A46                     __end_of_funtMENUSW:
  2582                           	opt stack 0
  2583                           tblptru	equ	0xFF8
  2584                           tblptrh	equ	0xFF7
  2585                           tblptrl	equ	0xFF6
  2586                           tablat	equ	0xFF5
  2587                           prodh	equ	0xFF4
  2588                           prodl	equ	0xFF3
  2589                           intcon	equ	0xFF2
  2590                           indf0	equ	0xFEF
  2591                           postinc0	equ	0xFEE
  2592                           fsr0h	equ	0xFEA
  2593                           fsr0l	equ	0xFE9
  2594                           wreg	equ	0xFE8
  2595                           postdec1	equ	0xFE5
  2596                           fsr1l	equ	0xFE1
  2597                           status	equ	0xFD8
  2598                           
  2599 ;; *************** function _encoderIni *****************
  2600 ;; Defined at:
  2601 ;;		line 27 in file "EncoderIncremental.c"
  2602 ;; Parameters:    Size  Location     Type
  2603 ;;		None
  2604 ;; Auto vars:     Size  Location     Type
  2605 ;;		None
  2606 ;; Return value:  Size  Location     Type
  2607 ;;                  1    wreg      void 
  2608 ;; Registers used:
  2609 ;;		None
  2610 ;; Tracked objects:
  2611 ;;		On entry : 0/0
  2612 ;;		On exit  : 0/0
  2613 ;;		Unchanged: 0/0
  2614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2615 ;;      Params:         0       0       0       0       0       0       0       0       0
  2616 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2617 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2618 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2619 ;;Total ram usage:        0 bytes
  2620 ;; Hardware stack levels used:    1
  2621 ;; Hardware stack levels required when called:    3
  2622 ;; This function calls:
  2623 ;;		Nothing
  2624 ;; This function is called by:
  2625 ;;		_main
  2626 ;; This function uses a non-reentrant model
  2627 ;;
  2628                           
  2629                           	psect	text16
  2630  0076D8                     __ptext16:
  2631                           	opt stack 0
  2632  0076D8                     _encoderIni:
  2633                           	opt stack 27
  2634                           
  2635                           ;EncoderIncremental.c: 29: TRISBbits.RB0 = 1;
  2636                           
  2637                           ;incstack = 0
  2638  0076D8  8093               	bsf	3987,0,c	;volatile
  2639                           
  2640                           ;EncoderIncremental.c: 30: TRISBbits.RB1 = 1;
  2641  0076DA  8293               	bsf	3987,1,c	;volatile
  2642                           
  2643                           ;EncoderIncremental.c: 32: INTCON2bits.RBPU = 0;
  2644  0076DC  9EF1               	bcf	intcon2,7,c	;volatile
  2645                           
  2646                           ;EncoderIncremental.c: 34: INTCON2bits.INTEDG0 = 0;
  2647  0076DE  9CF1               	bcf	intcon2,6,c	;volatile
  2648                           
  2649                           ;EncoderIncremental.c: 35: INTCON2bits.INTEDG1 = 0;
  2650  0076E0  9AF1               	bcf	intcon2,5,c	;volatile
  2651                           
  2652                           ;EncoderIncremental.c: 37: INTCONbits.INT0IF = 0;
  2653  0076E2  92F2               	bcf	intcon,1,c	;volatile
  2654                           
  2655                           ;EncoderIncremental.c: 38: INTCON3bits.INT1F = 0;
  2656  0076E4  90F0               	bcf	intcon3,0,c	;volatile
  2657                           
  2658                           ;EncoderIncremental.c: 40: INTCONbits.INT0IE = 1;
  2659  0076E6  88F2               	bsf	intcon,4,c	;volatile
  2660                           
  2661                           ;EncoderIncremental.c: 41: INTCON3bits.INT1IE = 1;
  2662  0076E8  86F0               	bsf	intcon3,3,c	;volatile
  2663  0076EA  0012               	return		;funcret
  2664  0076EC                     __end_of_encoderIni:
  2665                           	opt stack 0
  2666                           tblptru	equ	0xFF8
  2667                           tblptrh	equ	0xFF7
  2668                           tblptrl	equ	0xFF6
  2669                           tablat	equ	0xFF5
  2670                           prodh	equ	0xFF4
  2671                           prodl	equ	0xFF3
  2672                           intcon	equ	0xFF2
  2673                           intcon2	equ	0xFF1
  2674                           intcon3	equ	0xFF0
  2675                           indf0	equ	0xFEF
  2676                           postinc0	equ	0xFEE
  2677                           fsr0h	equ	0xFEA
  2678                           fsr0l	equ	0xFE9
  2679                           wreg	equ	0xFE8
  2680                           postdec1	equ	0xFE5
  2681                           fsr1l	equ	0xFE1
  2682                           status	equ	0xFD8
  2683                           
  2684 ;; *************** function _TIMER0_INI *****************
  2685 ;; Defined at:
  2686 ;;		line 13 in file "Tecnica1.c"
  2687 ;; Parameters:    Size  Location     Type
  2688 ;;		None
  2689 ;; Auto vars:     Size  Location     Type
  2690 ;;		None
  2691 ;; Return value:  Size  Location     Type
  2692 ;;                  1    wreg      void 
  2693 ;; Registers used:
  2694 ;;		wreg, status,2
  2695 ;; Tracked objects:
  2696 ;;		On entry : 0/0
  2697 ;;		On exit  : 0/0
  2698 ;;		Unchanged: 0/0
  2699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2700 ;;      Params:         0       0       0       0       0       0       0       0       0
  2701 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2702 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2703 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2704 ;;Total ram usage:        0 bytes
  2705 ;; Hardware stack levels used:    1
  2706 ;; Hardware stack levels required when called:    3
  2707 ;; This function calls:
  2708 ;;		Nothing
  2709 ;; This function is called by:
  2710 ;;		_main
  2711 ;; This function uses a non-reentrant model
  2712 ;;
  2713                           
  2714                           	psect	text17
  2715  0076EC                     __ptext17:
  2716                           	opt stack 0
  2717  0076EC                     _TIMER0_INI:
  2718                           	opt stack 27
  2719                           
  2720                           ;Tecnica1.c: 14: T0CONbits.TMR0ON = 0;
  2721                           
  2722                           ;incstack = 0
  2723  0076EC  9ED5               	bcf	4053,7,c	;volatile
  2724                           
  2725                           ;Tecnica1.c: 15: T0CONbits.T08BIT = 0;
  2726  0076EE  9CD5               	bcf	4053,6,c	;volatile
  2727                           
  2728                           ;Tecnica1.c: 16: T0CONbits.T0CS = 0;
  2729  0076F0  9AD5               	bcf	4053,5,c	;volatile
  2730                           
  2731                           ;Tecnica1.c: 17: T0CONbits.PSA = 0;
  2732  0076F2  96D5               	bcf	4053,3,c	;volatile
  2733                           
  2734                           ;Tecnica1.c: 18: T0CONbits.T0PS0 = 1;
  2735  0076F4  80D5               	bsf	4053,0,c	;volatile
  2736                           
  2737                           ;Tecnica1.c: 19: T0CONbits.T0PS1 = 1;
  2738  0076F6  82D5               	bsf	4053,1,c	;volatile
  2739                           
  2740                           ;Tecnica1.c: 20: T0CONbits.T0PS2 = 0;
  2741  0076F8  94D5               	bcf	4053,2,c	;volatile
  2742                           
  2743                           ;Tecnica1.c: 21: TMR0H = 0xFD;
  2744  0076FA  0EFD               	movlw	253
  2745  0076FC  6ED7               	movwf	4055,c	;volatile
  2746                           
  2747                           ;Tecnica1.c: 22: TMR0L = 0x11;
  2748  0076FE  0E11               	movlw	17
  2749  007700  6ED6               	movwf	4054,c	;volatile
  2750                           
  2751                           ;Tecnica1.c: 23: INTCONbits.TMR0IE = 1;
  2752  007702  8AF2               	bsf	intcon,5,c	;volatile
  2753  007704  0012               	return		;funcret
  2754  007706                     __end_of_TIMER0_INI:
  2755                           	opt stack 0
  2756                           tblptru	equ	0xFF8
  2757                           tblptrh	equ	0xFF7
  2758                           tblptrl	equ	0xFF6
  2759                           tablat	equ	0xFF5
  2760                           prodh	equ	0xFF4
  2761                           prodl	equ	0xFF3
  2762                           intcon	equ	0xFF2
  2763                           intcon2	equ	0xFF1
  2764                           intcon3	equ	0xFF0
  2765                           indf0	equ	0xFEF
  2766                           postinc0	equ	0xFEE
  2767                           fsr0h	equ	0xFEA
  2768                           fsr0l	equ	0xFE9
  2769                           wreg	equ	0xFE8
  2770                           postdec1	equ	0xFE5
  2771                           fsr1l	equ	0xFE1
  2772                           status	equ	0xFD8
  2773                           
  2774 ;; *************** function _PicIni21 *****************
  2775 ;; Defined at:
  2776 ;;		line 3 in file "ConfShield2_1.c"
  2777 ;; Parameters:    Size  Location     Type
  2778 ;;		None
  2779 ;; Auto vars:     Size  Location     Type
  2780 ;;		None
  2781 ;; Return value:  Size  Location     Type
  2782 ;;                  1    wreg      void 
  2783 ;; Registers used:
  2784 ;;		wreg, status,2
  2785 ;; Tracked objects:
  2786 ;;		On entry : 0/0
  2787 ;;		On exit  : 0/0
  2788 ;;		Unchanged: 0/0
  2789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2790 ;;      Params:         0       0       0       0       0       0       0       0       0
  2791 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2792 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2793 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2794 ;;Total ram usage:        0 bytes
  2795 ;; Hardware stack levels used:    1
  2796 ;; Hardware stack levels required when called:    3
  2797 ;; This function calls:
  2798 ;;		Nothing
  2799 ;; This function is called by:
  2800 ;;		_main
  2801 ;; This function uses a non-reentrant model
  2802 ;;
  2803                           
  2804                           	psect	text18
  2805  0077E0                     __ptext18:
  2806                           	opt stack 0
  2807  0077E0                     _PicIni21:
  2808                           	opt stack 27
  2809                           
  2810                           ;ConfShield2_1.c: 7: LATA = 0x00;
  2811                           
  2812                           ;incstack = 0
  2813  0077E0  0E00               	movlw	0
  2814  0077E2  6E89               	movwf	3977,c	;volatile
  2815                           
  2816                           ;ConfShield2_1.c: 8: LATB = 0x00;
  2817  0077E4  0E00               	movlw	0
  2818  0077E6  6E8A               	movwf	3978,c	;volatile
  2819                           
  2820                           ;ConfShield2_1.c: 9: LATC = 0x00;
  2821  0077E8  0E00               	movlw	0
  2822  0077EA  6E8B               	movwf	3979,c	;volatile
  2823                           
  2824                           ;ConfShield2_1.c: 10: LATD = 0x00;
  2825  0077EC  0E00               	movlw	0
  2826  0077EE  6E8C               	movwf	3980,c	;volatile
  2827                           
  2828                           ;ConfShield2_1.c: 11: LATE = 0x00;
  2829  0077F0  0E00               	movlw	0
  2830  0077F2  6E8D               	movwf	3981,c	;volatile
  2831                           
  2832                           ;ConfShield2_1.c: 15: TRISA = 0xFF;
  2833  0077F4  6892               	setf	3986,c	;volatile
  2834                           
  2835                           ;ConfShield2_1.c: 17: TRISB = 0xFF;
  2836  0077F6  6893               	setf	3987,c	;volatile
  2837                           
  2838                           ;ConfShield2_1.c: 18: TRISC = 0xFF;
  2839  0077F8  6894               	setf	3988,c	;volatile
  2840                           
  2841                           ;ConfShield2_1.c: 22: TRISD = 0x0C;
  2842  0077FA  0E0C               	movlw	12
  2843  0077FC  6E95               	movwf	3989,c	;volatile
  2844                           
  2845                           ;ConfShield2_1.c: 24: TRISE = 0x00;
  2846  0077FE  0E00               	movlw	0
  2847  007800  6E96               	movwf	3990,c	;volatile
  2848                           
  2849                           ;ConfShield2_1.c: 27: CMCON = 0x07;
  2850  007802  0E07               	movlw	7
  2851  007804  6EB4               	movwf	4020,c	;volatile
  2852                           
  2853                           ;ConfShield2_1.c: 28: ADCON1 = 0x0F;
  2854  007806  0E0F               	movlw	15
  2855  007808  6EC1               	movwf	4033,c	;volatile
  2856  00780A  0012               	return		;funcret
  2857  00780C                     __end_of_PicIni21:
  2858                           	opt stack 0
  2859                           tblptru	equ	0xFF8
  2860                           tblptrh	equ	0xFF7
  2861                           tblptrl	equ	0xFF6
  2862                           tablat	equ	0xFF5
  2863                           prodh	equ	0xFF4
  2864                           prodl	equ	0xFF3
  2865                           intcon	equ	0xFF2
  2866                           intcon2	equ	0xFF1
  2867                           intcon3	equ	0xFF0
  2868                           indf0	equ	0xFEF
  2869                           postinc0	equ	0xFEE
  2870                           fsr0h	equ	0xFEA
  2871                           fsr0l	equ	0xFE9
  2872                           wreg	equ	0xFE8
  2873                           postdec1	equ	0xFE5
  2874                           fsr1l	equ	0xFE1
  2875                           status	equ	0xFD8
  2876                           
  2877 ;; *************** function _LCD_init *****************
  2878 ;; Defined at:
  2879 ;;		line 179 in file "lcd.c"
  2880 ;; Parameters:    Size  Location     Type
  2881 ;;		None
  2882 ;; Auto vars:     Size  Location     Type
  2883 ;;  varFlecha       7    8[COMRAM] unsigned char [7]
  2884 ;; Return value:  Size  Location     Type
  2885 ;;                  1    wreg      void 
  2886 ;; Registers used:
  2887 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2888 ;; Tracked objects:
  2889 ;;		On entry : 0/0
  2890 ;;		On exit  : 0/0
  2891 ;;		Unchanged: 0/0
  2892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2893 ;;      Params:         0       0       0       0       0       0       0       0       0
  2894 ;;      Locals:         7       0       0       0       0       0       0       0       0
  2895 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2896 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2897 ;;Total ram usage:        7 bytes
  2898 ;; Hardware stack levels used:    1
  2899 ;; Hardware stack levels required when called:    7
  2900 ;; This function calls:
  2901 ;;		_Crear_Caracter
  2902 ;;		_read_BUSY
  2903 ;;		_ret_HOME
  2904 ;;		_write_CMD
  2905 ;; This function is called by:
  2906 ;;		_main
  2907 ;; This function uses a non-reentrant model
  2908 ;;
  2909                           
  2910                           	psect	text19
  2911  007B3A                     __ptext19:
  2912                           	opt stack 0
  2913  007B3A                     _LCD_init:
  2914                           	opt stack 23
  2915                           
  2916                           ;lcd.c: 180: TRISD &= 0x0F;
  2917                           
  2918                           ;incstack = 0
  2919  007B3A  0E0F               	movlw	15
  2920  007B3C  1695               	andwf	3989,f,c	;volatile
  2921                           
  2922                           ;lcd.c: 181: TRISEbits.RE2 = 0;
  2923  007B3E  9496               	bcf	3990,2,c	;volatile
  2924                           
  2925                           ;lcd.c: 182: TRISEbits.RE1 = 0;
  2926  007B40  9296               	bcf	3990,1,c	;volatile
  2927                           
  2928                           ;lcd.c: 183: TRISEbits.RE0 = 0;
  2929  007B42  9096               	bcf	3990,0,c	;volatile
  2930                           
  2931                           ;lcd.c: 186: LCD_tout = 30;
  2932  007B44  0E00               	movlw	0
  2933  007B46  6E47               	movwf	_LCD_tout+1,c
  2934  007B48  0E1E               	movlw	30
  2935  007B4A  6E46               	movwf	_LCD_tout,c
  2936  007B4C  5046               	movf	_LCD_tout,w,c
  2937  007B4E  1047               	iorwf	_LCD_tout+1,w,c
  2938  007B50  A4D8               	btfss	status,2,c
  2939  007B52  D7FC               	goto	l167
  2940                           
  2941                           ;lcd.c: 189: write_CMD(0x02);
  2942  007B54  0E02               	movlw	2
  2943  007B56  EC3A  F03B         	call	_write_CMD
  2944                           
  2945                           ;lcd.c: 190: LCD_tout = 1;
  2946  007B5A  0E00               	movlw	0
  2947  007B5C  6E47               	movwf	_LCD_tout+1,c
  2948  007B5E  0E01               	movlw	1
  2949  007B60  6E46               	movwf	_LCD_tout,c
  2950  007B62  5046               	movf	_LCD_tout,w,c
  2951  007B64  1047               	iorwf	_LCD_tout+1,w,c
  2952  007B66  A4D8               	btfss	status,2,c
  2953  007B68  D7FC               	goto	l170
  2954                           
  2955                           ;lcd.c: 193: write_CMD(0x28);
  2956  007B6A  0E28               	movlw	40
  2957  007B6C  EC3A  F03B         	call	_write_CMD
  2958                           
  2959                           ;lcd.c: 194: LCD_tout = 1;
  2960  007B70  0E00               	movlw	0
  2961  007B72  6E47               	movwf	_LCD_tout+1,c
  2962  007B74  0E01               	movlw	1
  2963  007B76  6E46               	movwf	_LCD_tout,c
  2964  007B78  5046               	movf	_LCD_tout,w,c
  2965  007B7A  1047               	iorwf	_LCD_tout+1,w,c
  2966  007B7C  A4D8               	btfss	status,2,c
  2967  007B7E  D7FC               	goto	l173
  2968                           
  2969                           ;lcd.c: 197: write_CMD(0x0C);
  2970  007B80  0E0C               	movlw	12
  2971  007B82  EC3A  F03B         	call	_write_CMD
  2972                           
  2973                           ;lcd.c: 198: LCD_tout = 1;
  2974  007B86  0E00               	movlw	0
  2975  007B88  6E47               	movwf	_LCD_tout+1,c
  2976  007B8A  0E01               	movlw	1
  2977  007B8C  6E46               	movwf	_LCD_tout,c
  2978  007B8E  5046               	movf	_LCD_tout,w,c
  2979  007B90  1047               	iorwf	_LCD_tout+1,w,c
  2980  007B92  A4D8               	btfss	status,2,c
  2981  007B94  D7FC               	goto	l176
  2982                           
  2983                           ;lcd.c: 201: write_CMD(0x01);
  2984  007B96  0E01               	movlw	1
  2985  007B98  EC3A  F03B         	call	_write_CMD
  2986                           
  2987                           ;lcd.c: 202: LCD_tout = 1;
  2988  007B9C  0E00               	movlw	0
  2989  007B9E  6E47               	movwf	_LCD_tout+1,c
  2990  007BA0  0E01               	movlw	1
  2991  007BA2  6E46               	movwf	_LCD_tout,c
  2992  007BA4  5046               	movf	_LCD_tout,w,c
  2993  007BA6  1047               	iorwf	_LCD_tout+1,w,c
  2994  007BA8  A4D8               	btfss	status,2,c
  2995  007BAA  D7FC               	goto	l179
  2996                           
  2997                           ;lcd.c: 205: write_CMD(0x06);
  2998  007BAC  0E06               	movlw	6
  2999  007BAE  EC3A  F03B         	call	_write_CMD
  3000                           
  3001                           ;lcd.c: 206: LCD_tout = 1;
  3002  007BB2  0E00               	movlw	0
  3003  007BB4  6E47               	movwf	_LCD_tout+1,c
  3004  007BB6  0E01               	movlw	1
  3005  007BB8  6E46               	movwf	_LCD_tout,c
  3006  007BBA  5046               	movf	_LCD_tout,w,c
  3007  007BBC  1047               	iorwf	_LCD_tout+1,w,c
  3008  007BBE  A4D8               	btfss	status,2,c
  3009  007BC0  D7FC               	goto	l182
  3010                           
  3011                           ;lcd.c: 209: read_BUSY();
  3012  007BC2  ECC7  F03B         	call	_read_BUSY	;wreg free
  3013                           
  3014                           ;lcd.c: 212: char varFlecha[] = {;lcd.c: 213: 0b00000,;lcd.c: 214: 0b01000,;lcd.c: 215: 
      +                          0b01100,;lcd.c: 216: 0b01110,;lcd.c: 217: 0b01100,;lcd.c: 218: 0b01000,;lcd.c: 219: 0b00
      +                          000;lcd.c: 220: };
  3015  007BC6  EE20  F035         	lfsr	2,LCD_init@F3134
  3016  007BCA  EE10  F023         	lfsr	1,LCD_init@varFlecha
  3017  007BCE  0E06               	movlw	6
  3018  007BD0                     u1531:
  3019  007BD0  CFDB FFE3          	movff	plusw2,plusw1
  3020  007BD4  06E8               	decf	wreg,f,c
  3021  007BD6  E2FC               	bc	u1531
  3022                           
  3023                           ;lcd.c: 221: Crear_Caracter(varFlecha, 0x40 + 0x00);
  3024  007BD8  0E23               	movlw	low LCD_init@varFlecha
  3025  007BDA  6E1E               	movwf	Crear_Caracter@linea,c
  3026  007BDC  0E00               	movlw	high LCD_init@varFlecha
  3027  007BDE  6E1F               	movwf	Crear_Caracter@linea+1,c
  3028  007BE0  0E40               	movlw	64
  3029  007BE2  6E20               	movwf	Crear_Caracter@direccion,c
  3030  007BE4  EC41  F03C         	call	_Crear_Caracter	;wreg free
  3031                           
  3032                           ;lcd.c: 222: ret_HOME();
  3033  007BE8  EC20  F03B         	call	_ret_HOME	;wreg free
  3034  007BEC  0012               	return		;funcret
  3035  007BEE                     __end_of_LCD_init:
  3036                           	opt stack 0
  3037                           tblptru	equ	0xFF8
  3038                           tblptrh	equ	0xFF7
  3039                           tblptrl	equ	0xFF6
  3040                           tablat	equ	0xFF5
  3041                           prodh	equ	0xFF4
  3042                           prodl	equ	0xFF3
  3043                           intcon	equ	0xFF2
  3044                           intcon2	equ	0xFF1
  3045                           intcon3	equ	0xFF0
  3046                           indf0	equ	0xFEF
  3047                           postinc0	equ	0xFEE
  3048                           fsr0h	equ	0xFEA
  3049                           fsr0l	equ	0xFE9
  3050                           wreg	equ	0xFE8
  3051                           postdec1	equ	0xFE5
  3052                           plusw1	equ	0xFE3
  3053                           fsr1l	equ	0xFE1
  3054                           plusw2	equ	0xFDB
  3055                           status	equ	0xFD8
  3056                           
  3057 ;; *************** function _ret_HOME *****************
  3058 ;; Defined at:
  3059 ;;		line 159 in file "lcd.c"
  3060 ;; Parameters:    Size  Location     Type
  3061 ;;		None
  3062 ;; Auto vars:     Size  Location     Type
  3063 ;;		None
  3064 ;; Return value:  Size  Location     Type
  3065 ;;                  1    wreg      void 
  3066 ;; Registers used:
  3067 ;;		wreg, status,2, status,0, cstack
  3068 ;; Tracked objects:
  3069 ;;		On entry : 0/0
  3070 ;;		On exit  : 0/0
  3071 ;;		Unchanged: 0/0
  3072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3073 ;;      Params:         0       0       0       0       0       0       0       0       0
  3074 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3075 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3076 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3077 ;;Total ram usage:        0 bytes
  3078 ;; Hardware stack levels used:    1
  3079 ;; Hardware stack levels required when called:    5
  3080 ;; This function calls:
  3081 ;;		_read_BUSY
  3082 ;;		_write_CMD
  3083 ;; This function is called by:
  3084 ;;		_LCD_init
  3085 ;; This function uses a non-reentrant model
  3086 ;;
  3087                           
  3088                           	psect	text20
  3089  007640                     __ptext20:
  3090                           	opt stack 0
  3091  007640                     _ret_HOME:
  3092                           	opt stack 24
  3093                           
  3094                           ;lcd.c: 160: write_CMD(0x02);
  3095                           
  3096                           ;incstack = 0
  3097  007640  0E02               	movlw	2
  3098  007642  EC3A  F03B         	call	_write_CMD
  3099                           
  3100                           ;lcd.c: 161: read_BUSY();
  3101  007646  ECC7  F03B         	call	_read_BUSY	;wreg free
  3102  00764A  0012               	return		;funcret
  3103  00764C                     __end_of_ret_HOME:
  3104                           	opt stack 0
  3105                           tblptru	equ	0xFF8
  3106                           tblptrh	equ	0xFF7
  3107                           tblptrl	equ	0xFF6
  3108                           tablat	equ	0xFF5
  3109                           prodh	equ	0xFF4
  3110                           prodl	equ	0xFF3
  3111                           intcon	equ	0xFF2
  3112                           intcon2	equ	0xFF1
  3113                           intcon3	equ	0xFF0
  3114                           indf0	equ	0xFEF
  3115                           postinc0	equ	0xFEE
  3116                           fsr0h	equ	0xFEA
  3117                           fsr0l	equ	0xFE9
  3118                           wreg	equ	0xFE8
  3119                           postdec1	equ	0xFE5
  3120                           plusw1	equ	0xFE3
  3121                           fsr1l	equ	0xFE1
  3122                           plusw2	equ	0xFDB
  3123                           status	equ	0xFD8
  3124                           
  3125 ;; *************** function _Crear_Caracter *****************
  3126 ;; Defined at:
  3127 ;;		line 71 in file "lcd.c"
  3128 ;; Parameters:    Size  Location     Type
  3129 ;;  linea           2    3[COMRAM] PTR unsigned char 
  3130 ;;		 -> LCD_init@varFlecha(7), 
  3131 ;;  direccion       1    5[COMRAM] unsigned char 
  3132 ;; Auto vars:     Size  Location     Type
  3133 ;;  i               2    6[COMRAM] int 
  3134 ;; Return value:  Size  Location     Type
  3135 ;;                  1    wreg      void 
  3136 ;; Registers used:
  3137 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3138 ;; Tracked objects:
  3139 ;;		On entry : 0/0
  3140 ;;		On exit  : 0/0
  3141 ;;		Unchanged: 0/0
  3142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3143 ;;      Params:         3       0       0       0       0       0       0       0       0
  3144 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3145 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3146 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3147 ;;Total ram usage:        5 bytes
  3148 ;; Hardware stack levels used:    1
  3149 ;; Hardware stack levels required when called:    6
  3150 ;; This function calls:
  3151 ;;		_char2LCD
  3152 ;;		_read_BUSY
  3153 ;;		_write_CMD
  3154 ;; This function is called by:
  3155 ;;		_LCD_init
  3156 ;; This function uses a non-reentrant model
  3157 ;;
  3158                           
  3159                           	psect	text21
  3160  007882                     __ptext21:
  3161                           	opt stack 0
  3162  007882                     _Crear_Caracter:
  3163                           	opt stack 23
  3164                           
  3165                           ;lcd.c: 72: write_CMD(direccion);
  3166                           
  3167                           ;incstack = 0
  3168  007882  5020               	movf	Crear_Caracter@direccion,w,c
  3169  007884  EC3A  F03B         	call	_write_CMD
  3170                           
  3171                           ;lcd.c: 73: read_BUSY();
  3172  007888  ECC7  F03B         	call	_read_BUSY	;wreg free
  3173                           
  3174                           ;lcd.c: 75: for (int i = 0; i <= 7; i++) {
  3175  00788C  0E00               	movlw	0
  3176  00788E  6E22               	movwf	Crear_Caracter@i+1,c
  3177  007890  0E00               	movlw	0
  3178  007892  6E21               	movwf	Crear_Caracter@i,c
  3179  007894                     l2468:
  3180  007894  BE22               	btfsc	Crear_Caracter@i+1,7,c
  3181  007896  D006               	goto	l125
  3182  007898  5022               	movf	Crear_Caracter@i+1,w,c
  3183  00789A  E110               	bnz	l127
  3184  00789C  0E08               	movlw	8
  3185  00789E  5C21               	subwf	Crear_Caracter@i,w,c
  3186  0078A0  B0D8               	btfsc	status,0,c
  3187  0078A2  0012               	return	
  3188  0078A4                     l125:
  3189                           
  3190                           ;lcd.c: 76: char2LCD(linea[i]);
  3191  0078A4  5021               	movf	Crear_Caracter@i,w,c
  3192  0078A6  241E               	addwf	Crear_Caracter@linea,w,c
  3193  0078A8  6ED9               	movwf	fsr2l,c
  3194  0078AA  5022               	movf	Crear_Caracter@i+1,w,c
  3195  0078AC  201F               	addwfc	Crear_Caracter@linea+1,w,c
  3196  0078AE  6EDA               	movwf	fsr2h,c
  3197  0078B0  50DF               	movf	indf2,w,c
  3198  0078B2  EC33  F03B         	call	_char2LCD
  3199  0078B6  4A21               	infsnz	Crear_Caracter@i,f,c
  3200  0078B8  2A22               	incf	Crear_Caracter@i+1,f,c
  3201  0078BA  D7EC               	goto	l2468
  3202  0078BC                     l127:
  3203  0078BC  0012               	return		;funcret
  3204  0078BE                     __end_of_Crear_Caracter:
  3205                           	opt stack 0
  3206                           tblptru	equ	0xFF8
  3207                           tblptrh	equ	0xFF7
  3208                           tblptrl	equ	0xFF6
  3209                           tablat	equ	0xFF5
  3210                           prodh	equ	0xFF4
  3211                           prodl	equ	0xFF3
  3212                           intcon	equ	0xFF2
  3213                           intcon2	equ	0xFF1
  3214                           intcon3	equ	0xFF0
  3215                           indf0	equ	0xFEF
  3216                           postinc0	equ	0xFEE
  3217                           fsr0h	equ	0xFEA
  3218                           fsr0l	equ	0xFE9
  3219                           wreg	equ	0xFE8
  3220                           postdec1	equ	0xFE5
  3221                           plusw1	equ	0xFE3
  3222                           fsr1l	equ	0xFE1
  3223                           indf2	equ	0xFDF
  3224                           plusw2	equ	0xFDB
  3225                           fsr2h	equ	0xFDA
  3226                           fsr2l	equ	0xFD9
  3227                           status	equ	0xFD8
  3228                           
  3229 ;; *************** function _write_CMD *****************
  3230 ;; Defined at:
  3231 ;;		line 238 in file "lcd.c"
  3232 ;; Parameters:    Size  Location     Type
  3233 ;;  dato            1    wreg     unsigned char 
  3234 ;; Auto vars:     Size  Location     Type
  3235 ;;  dato            1    1[COMRAM] unsigned char 
  3236 ;; Return value:  Size  Location     Type
  3237 ;;                  1    wreg      void 
  3238 ;; Registers used:
  3239 ;;		wreg, status,2, status,0, cstack
  3240 ;; Tracked objects:
  3241 ;;		On entry : 0/0
  3242 ;;		On exit  : 0/0
  3243 ;;		Unchanged: 0/0
  3244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3245 ;;      Params:         0       0       0       0       0       0       0       0       0
  3246 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3247 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3248 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3249 ;;Total ram usage:        1 bytes
  3250 ;; Hardware stack levels used:    1
  3251 ;; Hardware stack levels required when called:    4
  3252 ;; This function calls:
  3253 ;;		_write_LCD
  3254 ;; This function is called by:
  3255 ;;		_Crear_Caracter
  3256 ;;		_clear_LCD
  3257 ;;		_ret_HOME
  3258 ;;		_set_CURSOR
  3259 ;;		_LCD_init
  3260 ;;		_DesplazarIzquierda
  3261 ;; This function uses a non-reentrant model
  3262 ;;
  3263                           
  3264                           	psect	text22
  3265  007674                     __ptext22:
  3266                           	opt stack 0
  3267  007674                     _write_CMD:
  3268                           	opt stack 23
  3269                           
  3270                           ;incstack = 0
  3271                           ;write_CMD@dato stored from wreg
  3272  007674  6E1C               	movwf	write_CMD@dato,c
  3273                           
  3274                           ;lcd.c: 240: PORTEbits.RE2 = 0x0;
  3275  007676  9484               	bcf	3972,2,c	;volatile
  3276                           
  3277                           ;lcd.c: 241: PORTEbits.RE1 = 0x0;
  3278  007678  9284               	bcf	3972,1,c	;volatile
  3279                           
  3280                           ;lcd.c: 242: write_LCD(dato);
  3281  00767A  501C               	movf	write_CMD@dato,w,c
  3282  00767C  EC93  F03B         	call	_write_LCD
  3283  007680  0012               	return		;funcret
  3284  007682                     __end_of_write_CMD:
  3285                           	opt stack 0
  3286                           tblptru	equ	0xFF8
  3287                           tblptrh	equ	0xFF7
  3288                           tblptrl	equ	0xFF6
  3289                           tablat	equ	0xFF5
  3290                           prodh	equ	0xFF4
  3291                           prodl	equ	0xFF3
  3292                           intcon	equ	0xFF2
  3293                           intcon2	equ	0xFF1
  3294                           intcon3	equ	0xFF0
  3295                           indf0	equ	0xFEF
  3296                           postinc0	equ	0xFEE
  3297                           fsr0h	equ	0xFEA
  3298                           fsr0l	equ	0xFE9
  3299                           wreg	equ	0xFE8
  3300                           postdec1	equ	0xFE5
  3301                           plusw1	equ	0xFE3
  3302                           fsr1l	equ	0xFE1
  3303                           indf2	equ	0xFDF
  3304                           plusw2	equ	0xFDB
  3305                           fsr2h	equ	0xFDA
  3306                           fsr2l	equ	0xFD9
  3307                           status	equ	0xFD8
  3308                           
  3309 ;; *************** function _char2LCD *****************
  3310 ;; Defined at:
  3311 ;;		line 145 in file "lcd.c"
  3312 ;; Parameters:    Size  Location     Type
  3313 ;;  dato            1    wreg     unsigned char 
  3314 ;; Auto vars:     Size  Location     Type
  3315 ;;  dato            1    2[COMRAM] unsigned char 
  3316 ;; Return value:  Size  Location     Type
  3317 ;;                  1    wreg      void 
  3318 ;; Registers used:
  3319 ;;		wreg, status,2, status,0, cstack
  3320 ;; Tracked objects:
  3321 ;;		On entry : 0/0
  3322 ;;		On exit  : 0/0
  3323 ;;		Unchanged: 0/0
  3324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3325 ;;      Params:         0       0       0       0       0       0       0       0       0
  3326 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3327 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3328 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3329 ;;Total ram usage:        1 bytes
  3330 ;; Hardware stack levels used:    1
  3331 ;; Hardware stack levels required when called:    5
  3332 ;; This function calls:
  3333 ;;		_read_BUSY
  3334 ;;		_write_DATA
  3335 ;; This function is called by:
  3336 ;;		_var3LCD
  3337 ;;		_Crear_Caracter
  3338 ;;		_funtLCD
  3339 ;; This function uses a non-reentrant model
  3340 ;;
  3341                           
  3342                           	psect	text23
  3343  007666                     __ptext23:
  3344                           	opt stack 0
  3345  007666                     _char2LCD:
  3346                           	opt stack 23
  3347                           
  3348                           ;incstack = 0
  3349                           ;char2LCD@dato stored from wreg
  3350  007666  6E1D               	movwf	char2LCD@dato,c
  3351                           
  3352                           ;lcd.c: 146: write_DATA(dato);
  3353  007668  501D               	movf	char2LCD@dato,w,c
  3354  00766A  EC2C  F03B         	call	_write_DATA
  3355                           
  3356                           ;lcd.c: 147: read_BUSY();
  3357  00766E  ECC7  F03B         	call	_read_BUSY	;wreg free
  3358  007672  0012               	return		;funcret
  3359  007674                     __end_of_char2LCD:
  3360                           	opt stack 0
  3361                           tblptru	equ	0xFF8
  3362                           tblptrh	equ	0xFF7
  3363                           tblptrl	equ	0xFF6
  3364                           tablat	equ	0xFF5
  3365                           prodh	equ	0xFF4
  3366                           prodl	equ	0xFF3
  3367                           intcon	equ	0xFF2
  3368                           intcon2	equ	0xFF1
  3369                           intcon3	equ	0xFF0
  3370                           indf0	equ	0xFEF
  3371                           postinc0	equ	0xFEE
  3372                           fsr0h	equ	0xFEA
  3373                           fsr0l	equ	0xFE9
  3374                           wreg	equ	0xFE8
  3375                           postdec1	equ	0xFE5
  3376                           plusw1	equ	0xFE3
  3377                           fsr1l	equ	0xFE1
  3378                           indf2	equ	0xFDF
  3379                           plusw2	equ	0xFDB
  3380                           fsr2h	equ	0xFDA
  3381                           fsr2l	equ	0xFD9
  3382                           status	equ	0xFD8
  3383                           
  3384 ;; *************** function _write_DATA *****************
  3385 ;; Defined at:
  3386 ;;		line 228 in file "lcd.c"
  3387 ;; Parameters:    Size  Location     Type
  3388 ;;  dato            1    wreg     unsigned char 
  3389 ;; Auto vars:     Size  Location     Type
  3390 ;;  dato            1    1[COMRAM] unsigned char 
  3391 ;; Return value:  Size  Location     Type
  3392 ;;                  1    wreg      void 
  3393 ;; Registers used:
  3394 ;;		wreg, status,2, status,0, cstack
  3395 ;; Tracked objects:
  3396 ;;		On entry : 0/0
  3397 ;;		On exit  : 0/0
  3398 ;;		Unchanged: 0/0
  3399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3400 ;;      Params:         0       0       0       0       0       0       0       0       0
  3401 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3402 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3403 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3404 ;;Total ram usage:        1 bytes
  3405 ;; Hardware stack levels used:    1
  3406 ;; Hardware stack levels required when called:    4
  3407 ;; This function calls:
  3408 ;;		_write_LCD
  3409 ;; This function is called by:
  3410 ;;		_msg2LCD
  3411 ;;		_char2LCD
  3412 ;; This function uses a non-reentrant model
  3413 ;;
  3414                           
  3415                           	psect	text24
  3416  007658                     __ptext24:
  3417                           	opt stack 0
  3418  007658                     _write_DATA:
  3419                           	opt stack 23
  3420                           
  3421                           ;incstack = 0
  3422                           ;write_DATA@dato stored from wreg
  3423  007658  6E1C               	movwf	write_DATA@dato,c
  3424                           
  3425                           ;lcd.c: 230: PORTEbits.RE2 = 0x1;
  3426  00765A  8484               	bsf	3972,2,c	;volatile
  3427                           
  3428                           ;lcd.c: 231: PORTEbits.RE1 = 0x0;
  3429  00765C  9284               	bcf	3972,1,c	;volatile
  3430                           
  3431                           ;lcd.c: 232: write_LCD(dato);
  3432  00765E  501C               	movf	write_DATA@dato,w,c
  3433  007660  EC93  F03B         	call	_write_LCD
  3434  007664  0012               	return		;funcret
  3435  007666                     __end_of_write_DATA:
  3436                           	opt stack 0
  3437                           tblptru	equ	0xFF8
  3438                           tblptrh	equ	0xFF7
  3439                           tblptrl	equ	0xFF6
  3440                           tablat	equ	0xFF5
  3441                           prodh	equ	0xFF4
  3442                           prodl	equ	0xFF3
  3443                           intcon	equ	0xFF2
  3444                           intcon2	equ	0xFF1
  3445                           intcon3	equ	0xFF0
  3446                           indf0	equ	0xFEF
  3447                           postinc0	equ	0xFEE
  3448                           fsr0h	equ	0xFEA
  3449                           fsr0l	equ	0xFE9
  3450                           wreg	equ	0xFE8
  3451                           postdec1	equ	0xFE5
  3452                           plusw1	equ	0xFE3
  3453                           fsr1l	equ	0xFE1
  3454                           indf2	equ	0xFDF
  3455                           plusw2	equ	0xFDB
  3456                           fsr2h	equ	0xFDA
  3457                           fsr2l	equ	0xFD9
  3458                           status	equ	0xFD8
  3459                           
  3460 ;; *************** function _write_LCD *****************
  3461 ;; Defined at:
  3462 ;;		line 248 in file "lcd.c"
  3463 ;; Parameters:    Size  Location     Type
  3464 ;;  dato            1    wreg     unsigned char 
  3465 ;; Auto vars:     Size  Location     Type
  3466 ;;  dato            1    0[COMRAM] unsigned char 
  3467 ;; Return value:  Size  Location     Type
  3468 ;;                  1    wreg      void 
  3469 ;; Registers used:
  3470 ;;		wreg, status,2, status,0
  3471 ;; Tracked objects:
  3472 ;;		On entry : 0/0
  3473 ;;		On exit  : 0/0
  3474 ;;		Unchanged: 0/0
  3475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3476 ;;      Params:         0       0       0       0       0       0       0       0       0
  3477 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3478 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3479 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3480 ;;Total ram usage:        1 bytes
  3481 ;; Hardware stack levels used:    1
  3482 ;; Hardware stack levels required when called:    3
  3483 ;; This function calls:
  3484 ;;		Nothing
  3485 ;; This function is called by:
  3486 ;;		_write_DATA
  3487 ;;		_write_CMD
  3488 ;; This function uses a non-reentrant model
  3489 ;;
  3490                           
  3491                           	psect	text25
  3492  007726                     __ptext25:
  3493                           	opt stack 0
  3494  007726                     _write_LCD:
  3495                           	opt stack 23
  3496                           
  3497                           ;incstack = 0
  3498                           ;write_LCD@dato stored from wreg
  3499  007726  6E1B               	movwf	write_LCD@dato,c
  3500                           
  3501                           ;lcd.c: 250: LATD &= 0x0F;
  3502  007728  0E0F               	movlw	15
  3503  00772A  168C               	andwf	3980,f,c	;volatile
  3504                           
  3505                           ;lcd.c: 251: PORTEbits.RE0 = 0x1;
  3506  00772C  8084               	bsf	3972,0,c	;volatile
  3507                           
  3508                           ;lcd.c: 254: LATD |= (dato & 0xF0);
  3509  00772E  501B               	movf	write_LCD@dato,w,c
  3510  007730  0BF0               	andlw	240
  3511  007732  128C               	iorwf	3980,f,c	;volatile
  3512                           
  3513                           ;lcd.c: 256: PORTEbits.RE0 = 0x0;
  3514  007734  9084               	bcf	3972,0,c	;volatile
  3515                           
  3516                           ;lcd.c: 258: LATD &= 0x0F;
  3517  007736  0E0F               	movlw	15
  3518  007738  168C               	andwf	3980,f,c	;volatile
  3519                           
  3520                           ;lcd.c: 259: PORTEbits.RE0 = 0x1;
  3521  00773A  8084               	bsf	3972,0,c	;volatile
  3522                           
  3523                           ;lcd.c: 262: LATD |= (dato << 4);
  3524  00773C  381B               	swapf	write_LCD@dato,w,c
  3525  00773E  0BF0               	andlw	240
  3526  007740  128C               	iorwf	3980,f,c	;volatile
  3527                           
  3528                           ;lcd.c: 264: PORTEbits.RE0 = 0x0;
  3529  007742  9084               	bcf	3972,0,c	;volatile
  3530  007744  0012               	return		;funcret
  3531  007746                     __end_of_write_LCD:
  3532                           	opt stack 0
  3533                           tblptru	equ	0xFF8
  3534                           tblptrh	equ	0xFF7
  3535                           tblptrl	equ	0xFF6
  3536                           tablat	equ	0xFF5
  3537                           prodh	equ	0xFF4
  3538                           prodl	equ	0xFF3
  3539                           intcon	equ	0xFF2
  3540                           intcon2	equ	0xFF1
  3541                           intcon3	equ	0xFF0
  3542                           indf0	equ	0xFEF
  3543                           postinc0	equ	0xFEE
  3544                           fsr0h	equ	0xFEA
  3545                           fsr0l	equ	0xFE9
  3546                           wreg	equ	0xFE8
  3547                           postdec1	equ	0xFE5
  3548                           plusw1	equ	0xFE3
  3549                           fsr1l	equ	0xFE1
  3550                           indf2	equ	0xFDF
  3551                           plusw2	equ	0xFDB
  3552                           fsr2h	equ	0xFDA
  3553                           fsr2l	equ	0xFD9
  3554                           status	equ	0xFD8
  3555                           
  3556 ;; *************** function _read_BUSY *****************
  3557 ;; Defined at:
  3558 ;;		line 270 in file "lcd.c"
  3559 ;; Parameters:    Size  Location     Type
  3560 ;;		None
  3561 ;; Auto vars:     Size  Location     Type
  3562 ;;  aux             1    0[COMRAM] unsigned char 
  3563 ;; Return value:  Size  Location     Type
  3564 ;;                  1    wreg      void 
  3565 ;; Registers used:
  3566 ;;		wreg, status,2, status,0
  3567 ;; Tracked objects:
  3568 ;;		On entry : 0/0
  3569 ;;		On exit  : 0/0
  3570 ;;		Unchanged: 0/0
  3571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3572 ;;      Params:         0       0       0       0       0       0       0       0       0
  3573 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3574 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3575 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3576 ;;Total ram usage:        1 bytes
  3577 ;; Hardware stack levels used:    1
  3578 ;; Hardware stack levels required when called:    3
  3579 ;; This function calls:
  3580 ;;		Nothing
  3581 ;; This function is called by:
  3582 ;;		_Crear_Caracter
  3583 ;;		_msg2LCD
  3584 ;;		_char2LCD
  3585 ;;		_clear_LCD
  3586 ;;		_ret_HOME
  3587 ;;		_set_CURSOR
  3588 ;;		_LCD_init
  3589 ;;		_DesplazarIzquierda
  3590 ;; This function uses a non-reentrant model
  3591 ;;
  3592                           
  3593                           	psect	text26
  3594  00778E                     __ptext26:
  3595                           	opt stack 0
  3596  00778E                     _read_BUSY:
  3597                           	opt stack 24
  3598                           
  3599                           ;lcd.c: 271: unsigned char aux;;lcd.c: 273: TRISD |= 0xF0;
  3600                           
  3601                           ;incstack = 0
  3602  00778E  0EF0               	movlw	240
  3603  007790  1295               	iorwf	3989,f,c	;volatile
  3604                           
  3605                           ;lcd.c: 274: PORTEbits.RE2 = 0x0;
  3606  007792  9484               	bcf	3972,2,c	;volatile
  3607                           
  3608                           ;lcd.c: 275: PORTEbits.RE1 = 0x1;
  3609  007794  8284               	bsf	3972,1,c	;volatile
  3610  007796                     
  3611                           ;lcd.c: 277: PORTEbits.RE0 = 0x1;
  3612  007796  8084               	bsf	3972,0,c	;volatile
  3613                           
  3614                           ;lcd.c: 278: aux = PORTDbits.RD7;
  3615  007798  0E00               	movlw	0
  3616  00779A  BE83               	btfsc	3971,7,c	;volatile
  3617  00779C  0E01               	movlw	1
  3618  00779E  6E1B               	movwf	read_BUSY@aux,c
  3619                           
  3620                           ;lcd.c: 279: PORTEbits.RE0 = 0x0;
  3621  0077A0  9084               	bcf	3972,0,c	;volatile
  3622                           
  3623                           ;lcd.c: 280: PORTEbits.RE0 = 0x1;
  3624  0077A2  8084               	bsf	3972,0,c	;volatile
  3625                           
  3626                           ;lcd.c: 281: (void) PORTDbits.RD7;
  3627  0077A4  5083               	movf	3971,w,c	;volatile
  3628                           
  3629                           ;lcd.c: 282: PORTEbits.RE0 = 0x0;
  3630  0077A6  9084               	bcf	3972,0,c	;volatile
  3631                           
  3632                           ;lcd.c: 283: } while (aux);
  3633  0077A8  501B               	movf	read_BUSY@aux,w,c
  3634  0077AA  A4D8               	btfss	status,2,c
  3635  0077AC  D7F4               	goto	l198
  3636                           
  3637                           ;lcd.c: 284: PORTEbits.RE1 = 0x0;
  3638  0077AE  9284               	bcf	3972,1,c	;volatile
  3639                           
  3640                           ;lcd.c: 285: TRISD &= 0x0F;
  3641  0077B0  0E0F               	movlw	15
  3642  0077B2  1695               	andwf	3989,f,c	;volatile
  3643  0077B4  0012               	return		;funcret
  3644  0077B6                     __end_of_read_BUSY:
  3645                           	opt stack 0
  3646                           tblptru	equ	0xFF8
  3647                           tblptrh	equ	0xFF7
  3648                           tblptrl	equ	0xFF6
  3649                           tablat	equ	0xFF5
  3650                           prodh	equ	0xFF4
  3651                           prodl	equ	0xFF3
  3652                           intcon	equ	0xFF2
  3653                           intcon2	equ	0xFF1
  3654                           intcon3	equ	0xFF0
  3655                           indf0	equ	0xFEF
  3656                           postinc0	equ	0xFEE
  3657                           fsr0h	equ	0xFEA
  3658                           fsr0l	equ	0xFE9
  3659                           wreg	equ	0xFE8
  3660                           postdec1	equ	0xFE5
  3661                           plusw1	equ	0xFE3
  3662                           fsr1l	equ	0xFE1
  3663                           indf2	equ	0xFDF
  3664                           plusw2	equ	0xFDB
  3665                           fsr2h	equ	0xFDA
  3666                           fsr2l	equ	0xFD9
  3667                           status	equ	0xFD8
  3668                           
  3669 ;; *************** function _myISR *****************
  3670 ;; Defined at:
  3671 ;;		line 44 in file "main.c"
  3672 ;; Parameters:    Size  Location     Type
  3673 ;;		None
  3674 ;; Auto vars:     Size  Location     Type
  3675 ;;		None
  3676 ;; Return value:  Size  Location     Type
  3677 ;;                  1    wreg      void 
  3678 ;; Registers used:
  3679 ;;		wreg, status,2, status,0, cstack
  3680 ;; Tracked objects:
  3681 ;;		On entry : 0/0
  3682 ;;		On exit  : 0/0
  3683 ;;		Unchanged: 0/0
  3684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3685 ;;      Params:         0       0       0       0       0       0       0       0       0
  3686 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3687 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3688 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3689 ;;Total ram usage:        0 bytes
  3690 ;; Hardware stack levels used:    1
  3691 ;; Hardware stack levels required when called:    2
  3692 ;; This function calls:
  3693 ;;		_encoderInterrup
  3694 ;;		_tic_LCD
  3695 ;;		_tic_encoder
  3696 ;; This function is called by:
  3697 ;;		Interrupt level 2
  3698 ;; This function uses a non-reentrant model
  3699 ;;
  3700                           
  3701                           	psect	intcode
  3702  002008                     __pintcode:
  3703                           	opt stack 0
  3704  002008                     _myISR:
  3705                           	opt stack 23
  3706                           
  3707                           ;incstack = 0
  3708  002008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3709  00200A  ED83  F03B         	call	int_func,f	;refresh shadow registers
  3710                           tblptru	equ	0xFF8
  3711                           tblptrh	equ	0xFF7
  3712                           tblptrl	equ	0xFF6
  3713                           tablat	equ	0xFF5
  3714                           prodh	equ	0xFF4
  3715                           prodl	equ	0xFF3
  3716                           intcon	equ	0xFF2
  3717                           intcon2	equ	0xFF1
  3718                           intcon3	equ	0xFF0
  3719                           indf0	equ	0xFEF
  3720                           postinc0	equ	0xFEE
  3721                           fsr0h	equ	0xFEA
  3722                           fsr0l	equ	0xFE9
  3723                           wreg	equ	0xFE8
  3724                           postdec1	equ	0xFE5
  3725                           plusw1	equ	0xFE3
  3726                           fsr1l	equ	0xFE1
  3727                           indf2	equ	0xFDF
  3728                           plusw2	equ	0xFDB
  3729                           fsr2h	equ	0xFDA
  3730                           fsr2l	equ	0xFD9
  3731                           status	equ	0xFD8
  3732                           
  3733                           	psect	intcode_body
  3734  007706                     __pintcode_body:
  3735                           	opt stack 23
  3736  007706                     int_func:
  3737                           	opt stack 23
  3738  007706  0006               	pop		; remove dummy address from shadow register refresh
  3739                           
  3740                           ;main.c: 45: if (TMR0IF) {
  3741  007708  A4F2               	btfss	intcon,2,c	;volatile
  3742  00770A  D009               	goto	i2l61
  3743                           
  3744                           ;main.c: 46: TMR0H = 0xFD;
  3745  00770C  0EFD               	movlw	253
  3746  00770E  6ED7               	movwf	4055,c	;volatile
  3747                           
  3748                           ;main.c: 47: TMR0L = 0x11;
  3749  007710  0E11               	movlw	17
  3750  007712  6ED6               	movwf	4054,c	;volatile
  3751                           
  3752                           ;main.c: 48: TMR0IF = 0;
  3753  007714  94F2               	bcf	intcon,2,c	;volatile
  3754                           
  3755                           ;main.c: 50: tic_LCD();
  3756  007716  EC41  F03B         	call	_tic_LCD	;wreg free
  3757                           
  3758                           ;main.c: 51: tic_encoder();
  3759  00771A  EC5F  F03C         	call	_tic_encoder	;wreg free
  3760  00771E                     i2l61:
  3761                           
  3762                           ;main.c: 52: };main.c: 53: encoderInterrup();
  3763  00771E  EC23  F03C         	call	_encoderInterrup	;wreg free
  3764  007722  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3765  007724  0011               	retfie		f
  3766  007726                     __end_of_myISR:
  3767                           	opt stack 0
  3768                           tblptru	equ	0xFF8
  3769                           tblptrh	equ	0xFF7
  3770                           tblptrl	equ	0xFF6
  3771                           tablat	equ	0xFF5
  3772                           prodh	equ	0xFF4
  3773                           prodl	equ	0xFF3
  3774                           intcon	equ	0xFF2
  3775                           intcon2	equ	0xFF1
  3776                           intcon3	equ	0xFF0
  3777                           indf0	equ	0xFEF
  3778                           postinc0	equ	0xFEE
  3779                           fsr0h	equ	0xFEA
  3780                           fsr0l	equ	0xFE9
  3781                           wreg	equ	0xFE8
  3782                           postdec1	equ	0xFE5
  3783                           plusw1	equ	0xFE3
  3784                           fsr1l	equ	0xFE1
  3785                           indf2	equ	0xFDF
  3786                           plusw2	equ	0xFDB
  3787                           fsr2h	equ	0xFDA
  3788                           fsr2l	equ	0xFD9
  3789                           status	equ	0xFD8
  3790                           
  3791 ;; *************** function _tic_encoder *****************
  3792 ;; Defined at:
  3793 ;;		line 81 in file "EncoderIncremental.c"
  3794 ;; Parameters:    Size  Location     Type
  3795 ;;		None
  3796 ;; Auto vars:     Size  Location     Type
  3797 ;;		None
  3798 ;; Return value:  Size  Location     Type
  3799 ;;                  1    wreg      void 
  3800 ;; Registers used:
  3801 ;;		wreg, status,2, status,0, cstack
  3802 ;; Tracked objects:
  3803 ;;		On entry : 0/0
  3804 ;;		On exit  : 0/0
  3805 ;;		Unchanged: 0/0
  3806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3807 ;;      Params:         0       0       0       0       0       0       0       0       0
  3808 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3809 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3810 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3811 ;;Total ram usage:        0 bytes
  3812 ;; Hardware stack levels used:    1
  3813 ;; Hardware stack levels required when called:    1
  3814 ;; This function calls:
  3815 ;;		_antireboteEncoder
  3816 ;; This function is called by:
  3817 ;;		_myISR
  3818 ;; This function uses a non-reentrant model
  3819 ;;
  3820                           
  3821                           	psect	text28
  3822  0078BE                     __ptext28:
  3823                           	opt stack 0
  3824  0078BE                     _tic_encoder:
  3825                           	opt stack 23
  3826                           
  3827                           ;EncoderIncremental.c: 82: if (ENCODER == RELEASE) {
  3828                           
  3829                           ;incstack = 0
  3830  0078BE  0E03               	movlw	3
  3831  0078C0  1842               	xorwf	_ENCODER,w,c
  3832  0078C2  A4D8               	btfss	status,2,c
  3833  0078C4  D014               	goto	i2l515
  3834                           
  3835                           ;EncoderIncremental.c: 83: if (encoderTout)encoderTout--;
  3836  0078C6  500C               	movf	_encoderTout,w,c
  3837  0078C8  A4D8               	btfss	status,2,c
  3838  0078CA  060C               	decf	_encoderTout,f,c
  3839                           
  3840                           ;EncoderIncremental.c: 85: if (Flag_RB0 && Flag_RB1 && encoderTout == 0) {
  3841  0078CC  500E               	movf	_Flag_RB0,w,c
  3842  0078CE  B4D8               	btfsc	status,2,c
  3843  0078D0  D00E               	goto	i2l515
  3844  0078D2  500D               	movf	_Flag_RB1,w,c
  3845  0078D4  B4D8               	btfsc	status,2,c
  3846  0078D6  D00B               	goto	i2l515
  3847  0078D8  500C               	movf	_encoderTout,w,c
  3848  0078DA  A4D8               	btfss	status,2,c
  3849  0078DC  D008               	goto	i2l515
  3850                           
  3851                           ;EncoderIncremental.c: 86: ENCODER = STOPPED;
  3852  0078DE  0E02               	movlw	2
  3853  0078E0  6E42               	movwf	_ENCODER,c
  3854                           
  3855                           ;EncoderIncremental.c: 87: INT0IF = 0;
  3856  0078E2  92F2               	bcf	intcon,1,c	;volatile
  3857                           
  3858                           ;EncoderIncremental.c: 88: INT1IF = 0;
  3859  0078E4  90F0               	bcf	intcon3,0,c	;volatile
  3860                           
  3861                           ;EncoderIncremental.c: 89: INT0IE = 1;
  3862  0078E6  88F2               	bsf	intcon,4,c	;volatile
  3863                           
  3864                           ;EncoderIncremental.c: 90: INT1IE = 1;
  3865  0078E8  86F0               	bsf	intcon3,3,c	;volatile
  3866                           
  3867                           ;EncoderIncremental.c: 91: encoderTout = 20;
  3868  0078EA  0E14               	movlw	20
  3869  0078EC  6E0C               	movwf	_encoderTout,c
  3870  0078EE                     i2l515:
  3871                           
  3872                           ;EncoderIncremental.c: 92: };EncoderIncremental.c: 93: };EncoderIncremental.c: 94: antir
      +                          eboteEncoder();
  3873  0078EE  EC7E  F03C         	call	_antireboteEncoder	;wreg free
  3874                           
  3875                           ;EncoderIncremental.c: 96: if (varEncoderSW)varEncoderSW--;
  3876  0078F2  5015               	movf	_varEncoderSW,w,c
  3877  0078F4  B4D8               	btfsc	status,2,c
  3878  0078F6  0012               	return	
  3879  0078F8  0615               	decf	_varEncoderSW,f,c
  3880  0078FA  0012               	return	
  3881  0078FC                     __end_of_tic_encoder:
  3882                           	opt stack 0
  3883                           tblptru	equ	0xFF8
  3884                           tblptrh	equ	0xFF7
  3885                           tblptrl	equ	0xFF6
  3886                           tablat	equ	0xFF5
  3887                           prodh	equ	0xFF4
  3888                           prodl	equ	0xFF3
  3889                           intcon	equ	0xFF2
  3890                           intcon2	equ	0xFF1
  3891                           intcon3	equ	0xFF0
  3892                           indf0	equ	0xFEF
  3893                           postinc0	equ	0xFEE
  3894                           fsr0h	equ	0xFEA
  3895                           fsr0l	equ	0xFE9
  3896                           wreg	equ	0xFE8
  3897                           postdec1	equ	0xFE5
  3898                           plusw1	equ	0xFE3
  3899                           fsr1l	equ	0xFE1
  3900                           indf2	equ	0xFDF
  3901                           plusw2	equ	0xFDB
  3902                           fsr2h	equ	0xFDA
  3903                           fsr2l	equ	0xFD9
  3904                           status	equ	0xFD8
  3905                           
  3906 ;; *************** function _antireboteEncoder *****************
  3907 ;; Defined at:
  3908 ;;		line 99 in file "EncoderIncremental.c"
  3909 ;; Parameters:    Size  Location     Type
  3910 ;;		None
  3911 ;; Auto vars:     Size  Location     Type
  3912 ;;		None
  3913 ;; Return value:  Size  Location     Type
  3914 ;;                  1    wreg      void 
  3915 ;; Registers used:
  3916 ;;		wreg, status,2, status,0
  3917 ;; Tracked objects:
  3918 ;;		On entry : 0/0
  3919 ;;		On exit  : 0/0
  3920 ;;		Unchanged: 0/0
  3921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3922 ;;      Params:         0       0       0       0       0       0       0       0       0
  3923 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3924 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3925 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3926 ;;Total ram usage:        0 bytes
  3927 ;; Hardware stack levels used:    1
  3928 ;; This function calls:
  3929 ;;		Nothing
  3930 ;; This function is called by:
  3931 ;;		_tic_encoder
  3932 ;; This function uses a non-reentrant model
  3933 ;;
  3934                           
  3935                           	psect	text29
  3936  0078FC                     __ptext29:
  3937                           	opt stack 0
  3938  0078FC                     _antireboteEncoder:
  3939                           	opt stack 23
  3940                           
  3941                           ;EncoderIncremental.c: 100: static unsigned char cont[2];;EncoderIncremental.c: 102: if 
      +                          (PORTBbits.RB0) {
  3942                           
  3943                           ;incstack = 0
  3944  0078FC  A081               	btfss	3969,0,c	;volatile
  3945  0078FE  D005               	goto	i2l522
  3946                           
  3947                           ;EncoderIncremental.c: 103: if (cont[0] < 255)cont[0]++;
  3948  007900  2801               	incf	antireboteEncoder@cont,w,c
  3949  007902  B4D8               	btfsc	status,2,c
  3950  007904  D004               	goto	i2l524
  3951  007906  2A01               	incf	antireboteEncoder@cont,f,c
  3952                           
  3953                           ;EncoderIncremental.c: 104: } else cont[0] = 0;
  3954  007908  D002               	goto	i2l524
  3955  00790A                     i2l522:
  3956  00790A  0E00               	movlw	0
  3957  00790C  6E01               	movwf	antireboteEncoder@cont,c
  3958  00790E                     i2l524:
  3959                           
  3960                           ;EncoderIncremental.c: 106: if (cont[0] > 10) {
  3961  00790E  0E0A               	movlw	10
  3962  007910  6401               	cpfsgt	antireboteEncoder@cont,c
  3963  007912  D002               	goto	i2l525
  3964                           
  3965                           ;EncoderIncremental.c: 107: Flag_RB0 = 1;
  3966  007914  0E01               	movlw	1
  3967  007916  D001               	goto	L5
  3968  007918                     i2l525:
  3969  007918  0E00               	movlw	0
  3970  00791A                     L5:
  3971  00791A  6E0E               	movwf	_Flag_RB0,c
  3972                           
  3973                           ;EncoderIncremental.c: 111: if (PORTBbits.RB1) {
  3974  00791C  A281               	btfss	3969,1,c	;volatile
  3975  00791E  D005               	goto	i2l527
  3976                           
  3977                           ;EncoderIncremental.c: 112: if (cont[1] < 255)cont[1]++;
  3978  007920  2802               	incf	antireboteEncoder@cont+1,w,c
  3979  007922  B4D8               	btfsc	status,2,c
  3980  007924  D004               	goto	i2l529
  3981  007926  2A02               	incf	antireboteEncoder@cont+1,f,c
  3982                           
  3983                           ;EncoderIncremental.c: 113: } else cont[1] = 0;
  3984  007928  D002               	goto	i2l529
  3985  00792A                     i2l527:
  3986  00792A  0E00               	movlw	0
  3987  00792C  6E02               	movwf	antireboteEncoder@cont+1,c
  3988  00792E                     i2l529:
  3989                           
  3990                           ;EncoderIncremental.c: 115: if (cont[1] > 10) {
  3991  00792E  0E0A               	movlw	10
  3992  007930  6402               	cpfsgt	antireboteEncoder@cont+1,c
  3993  007932  D003               	goto	i2l530
  3994                           
  3995                           ;EncoderIncremental.c: 116: Flag_RB1 = 1;
  3996  007934  0E01               	movlw	1
  3997  007936  6E0D               	movwf	_Flag_RB1,c
  3998                           
  3999                           ;EncoderIncremental.c: 117: } else Flag_RB1 = 0;
  4000  007938  0012               	return	
  4001  00793A                     i2l530:
  4002  00793A  0E00               	movlw	0
  4003  00793C  6E0D               	movwf	_Flag_RB1,c
  4004  00793E  0012               	return	
  4005  007940                     __end_of_antireboteEncoder:
  4006                           	opt stack 0
  4007                           tblptru	equ	0xFF8
  4008                           tblptrh	equ	0xFF7
  4009                           tblptrl	equ	0xFF6
  4010                           tablat	equ	0xFF5
  4011                           prodh	equ	0xFF4
  4012                           prodl	equ	0xFF3
  4013                           intcon	equ	0xFF2
  4014                           intcon2	equ	0xFF1
  4015                           intcon3	equ	0xFF0
  4016                           indf0	equ	0xFEF
  4017                           postinc0	equ	0xFEE
  4018                           fsr0h	equ	0xFEA
  4019                           fsr0l	equ	0xFE9
  4020                           wreg	equ	0xFE8
  4021                           postdec1	equ	0xFE5
  4022                           plusw1	equ	0xFE3
  4023                           fsr1l	equ	0xFE1
  4024                           indf2	equ	0xFDF
  4025                           plusw2	equ	0xFDB
  4026                           fsr2h	equ	0xFDA
  4027                           fsr2l	equ	0xFD9
  4028                           status	equ	0xFD8
  4029                           
  4030 ;; *************** function _tic_LCD *****************
  4031 ;; Defined at:
  4032 ;;		line 290 in file "lcd.c"
  4033 ;; Parameters:    Size  Location     Type
  4034 ;;		None
  4035 ;; Auto vars:     Size  Location     Type
  4036 ;;		None
  4037 ;; Return value:  Size  Location     Type
  4038 ;;                  1    wreg      void 
  4039 ;; Registers used:
  4040 ;;		wreg, status,2, status,0
  4041 ;; Tracked objects:
  4042 ;;		On entry : 0/0
  4043 ;;		On exit  : 0/0
  4044 ;;		Unchanged: 0/0
  4045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4046 ;;      Params:         0       0       0       0       0       0       0       0       0
  4047 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4048 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4049 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4050 ;;Total ram usage:        0 bytes
  4051 ;; Hardware stack levels used:    1
  4052 ;; This function calls:
  4053 ;;		Nothing
  4054 ;; This function is called by:
  4055 ;;		_myISR
  4056 ;; This function uses a non-reentrant model
  4057 ;;
  4058                           
  4059                           	psect	text30
  4060  007682                     __ptext30:
  4061                           	opt stack 0
  4062  007682                     _tic_LCD:
  4063                           	opt stack 24
  4064                           
  4065                           ;lcd.c: 291: if (LCD_tout) LCD_tout--;
  4066                           
  4067                           ;incstack = 0
  4068  007682  5046               	movf	_LCD_tout,w,c
  4069  007684  1047               	iorwf	_LCD_tout+1,w,c
  4070  007686  B4D8               	btfsc	status,2,c
  4071  007688  0012               	return	
  4072  00768A  0646               	decf	_LCD_tout,f,c
  4073  00768C  A0D8               	btfss	status,0,c
  4074  00768E  0647               	decf	_LCD_tout+1,f,c
  4075  007690  0012               	return	
  4076  007692                     __end_of_tic_LCD:
  4077                           	opt stack 0
  4078                           tblptru	equ	0xFF8
  4079                           tblptrh	equ	0xFF7
  4080                           tblptrl	equ	0xFF6
  4081                           tablat	equ	0xFF5
  4082                           prodh	equ	0xFF4
  4083                           prodl	equ	0xFF3
  4084                           intcon	equ	0xFF2
  4085                           intcon2	equ	0xFF1
  4086                           intcon3	equ	0xFF0
  4087                           indf0	equ	0xFEF
  4088                           postinc0	equ	0xFEE
  4089                           fsr0h	equ	0xFEA
  4090                           fsr0l	equ	0xFE9
  4091                           wreg	equ	0xFE8
  4092                           postdec1	equ	0xFE5
  4093                           plusw1	equ	0xFE3
  4094                           fsr1l	equ	0xFE1
  4095                           indf2	equ	0xFDF
  4096                           plusw2	equ	0xFDB
  4097                           fsr2h	equ	0xFDA
  4098                           fsr2l	equ	0xFD9
  4099                           status	equ	0xFD8
  4100                           
  4101 ;; *************** function _encoderInterrup *****************
  4102 ;; Defined at:
  4103 ;;		line 44 in file "EncoderIncremental.c"
  4104 ;; Parameters:    Size  Location     Type
  4105 ;;		None
  4106 ;; Auto vars:     Size  Location     Type
  4107 ;;		None
  4108 ;; Return value:  Size  Location     Type
  4109 ;;                  1    wreg      void 
  4110 ;; Registers used:
  4111 ;;		wreg, status,2
  4112 ;; Tracked objects:
  4113 ;;		On entry : 0/0
  4114 ;;		On exit  : 0/0
  4115 ;;		Unchanged: 0/0
  4116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4117 ;;      Params:         0       0       0       0       0       0       0       0       0
  4118 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4119 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4120 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4121 ;;Total ram usage:        0 bytes
  4122 ;; Hardware stack levels used:    1
  4123 ;; This function calls:
  4124 ;;		Nothing
  4125 ;; This function is called by:
  4126 ;;		_myISR
  4127 ;; This function uses a non-reentrant model
  4128 ;;
  4129                           
  4130                           	psect	text31
  4131  007846                     __ptext31:
  4132                           	opt stack 0
  4133  007846                     _encoderInterrup:
  4134                           	opt stack 24
  4135                           
  4136                           ;EncoderIncremental.c: 45: if (INT0IE) {
  4137                           
  4138                           ;incstack = 0
  4139  007846  A8F2               	btfss	intcon,4,c	;volatile
  4140  007848  0012               	return	
  4141                           
  4142                           ;EncoderIncremental.c: 47: if (INT0IF) {
  4143  00784A  A2F2               	btfss	intcon,1,c	;volatile
  4144  00784C  D00C               	goto	i2l503
  4145  00784E  F000               	nop		;# 
  4146                           
  4147                           ;EncoderIncremental.c: 50: INT0IE = 0;
  4148  007850  98F2               	bcf	intcon,4,c	;volatile
  4149                           
  4150                           ;EncoderIncremental.c: 51: INT1IE = 0;
  4151  007852  96F0               	bcf	intcon3,3,c	;volatile
  4152                           
  4153                           ;EncoderIncremental.c: 53: if (!INT1IF) {
  4154  007854  B0F0               	btfsc	intcon3,0,c	;volatile
  4155  007856  D002               	goto	i2l504
  4156                           
  4157                           ;EncoderIncremental.c: 54: ENCODER = LEFT;
  4158  007858  0E00               	movlw	0
  4159  00785A  D001               	goto	L6
  4160  00785C                     i2l504:
  4161  00785C  0E03               	movlw	3
  4162  00785E                     L6:
  4163  00785E  6E42               	movwf	_ENCODER,c
  4164                           
  4165                           ;EncoderIncremental.c: 57: INT0IF = 0;
  4166  007860  92F2               	bcf	intcon,1,c	;volatile
  4167                           
  4168                           ;EncoderIncremental.c: 58: INT1IF = 0;
  4169  007862  90F0               	bcf	intcon3,0,c	;volatile
  4170                           
  4171                           ;EncoderIncremental.c: 60: } else if (INT1IF) {
  4172  007864  0012               	return	
  4173  007866                     i2l503:
  4174  007866  A0F0               	btfss	intcon3,0,c	;volatile
  4175  007868  0012               	return	
  4176  00786A  F000               	nop		;# 
  4177                           
  4178                           ;EncoderIncremental.c: 63: INT0IE = 0;
  4179  00786C  98F2               	bcf	intcon,4,c	;volatile
  4180                           
  4181                           ;EncoderIncremental.c: 64: INT1IE = 0;
  4182  00786E  96F0               	bcf	intcon3,3,c	;volatile
  4183                           
  4184                           ;EncoderIncremental.c: 66: if (!INT0IF) {
  4185  007870  B2F2               	btfsc	intcon,1,c	;volatile
  4186  007872  D002               	goto	i2l508
  4187                           
  4188                           ;EncoderIncremental.c: 67: ENCODER = RIGHT;
  4189  007874  0E01               	movlw	1
  4190  007876  D001               	goto	L7
  4191  007878                     i2l508:
  4192  007878  0E03               	movlw	3
  4193  00787A                     L7:
  4194  00787A  6E42               	movwf	_ENCODER,c
  4195                           
  4196                           ;EncoderIncremental.c: 70: INT0IF = 0;
  4197  00787C  92F2               	bcf	intcon,1,c	;volatile
  4198                           
  4199                           ;EncoderIncremental.c: 71: INT1IF = 0;
  4200  00787E  90F0               	bcf	intcon3,0,c	;volatile
  4201  007880  0012               	return	
  4202  007882                     __end_of_encoderInterrup:
  4203                           	opt stack 0
  4204                           tblptru	equ	0xFF8
  4205                           tblptrh	equ	0xFF7
  4206                           tblptrl	equ	0xFF6
  4207                           tablat	equ	0xFF5
  4208                           prodh	equ	0xFF4
  4209                           prodl	equ	0xFF3
  4210                           intcon	equ	0xFF2
  4211                           intcon2	equ	0xFF1
  4212                           intcon3	equ	0xFF0
  4213                           indf0	equ	0xFEF
  4214                           postinc0	equ	0xFEE
  4215                           fsr0h	equ	0xFEA
  4216                           fsr0l	equ	0xFE9
  4217                           wreg	equ	0xFE8
  4218                           postdec1	equ	0xFE5
  4219                           plusw1	equ	0xFE3
  4220                           fsr1l	equ	0xFE1
  4221                           indf2	equ	0xFDF
  4222                           plusw2	equ	0xFDB
  4223                           fsr2h	equ	0xFDA
  4224                           fsr2l	equ	0xFD9
  4225                           status	equ	0xFD8
  4226                           tblptru	equ	0xFF8
  4227                           tblptrh	equ	0xFF7
  4228                           tblptrl	equ	0xFF6
  4229                           tablat	equ	0xFF5
  4230                           prodh	equ	0xFF4
  4231                           prodl	equ	0xFF3
  4232                           intcon	equ	0xFF2
  4233                           intcon2	equ	0xFF1
  4234                           intcon3	equ	0xFF0
  4235                           indf0	equ	0xFEF
  4236                           postinc0	equ	0xFEE
  4237                           fsr0h	equ	0xFEA
  4238                           fsr0l	equ	0xFE9
  4239                           wreg	equ	0xFE8
  4240                           postdec1	equ	0xFE5
  4241                           plusw1	equ	0xFE3
  4242                           fsr1l	equ	0xFE1
  4243                           indf2	equ	0xFDF
  4244                           plusw2	equ	0xFDB
  4245                           fsr2h	equ	0xFDA
  4246                           fsr2l	equ	0xFD9
  4247                           status	equ	0xFD8
  4248                           
  4249                           	psect	rparam
  4250  0000                     tblptru	equ	0xFF8
  4251                           tblptrh	equ	0xFF7
  4252                           tblptrl	equ	0xFF6
  4253                           tablat	equ	0xFF5
  4254                           prodh	equ	0xFF4
  4255                           prodl	equ	0xFF3
  4256                           intcon	equ	0xFF2
  4257                           intcon2	equ	0xFF1
  4258                           intcon3	equ	0xFF0
  4259                           indf0	equ	0xFEF
  4260                           postinc0	equ	0xFEE
  4261                           fsr0h	equ	0xFEA
  4262                           fsr0l	equ	0xFE9
  4263                           wreg	equ	0xFE8
  4264                           postdec1	equ	0xFE5
  4265                           plusw1	equ	0xFE3
  4266                           fsr1l	equ	0xFE1
  4267                           indf2	equ	0xFDF
  4268                           plusw2	equ	0xFDB
  4269                           fsr2h	equ	0xFDA
  4270                           fsr2l	equ	0xFD9
  4271                           status	equ	0xFD8
  4272                           
  4273                           	psect	temp
  4274  000048                     btemp:
  4275                           	opt stack 0
  4276  000048                     	ds	1
  4277  0000                     int$flags	set	btemp
  4278  0000                     wtemp8	set	btemp+1
  4279  0000                     ttemp5	set	btemp+1
  4280  0000                     ttemp6	set	btemp+4
  4281  0000                     ttemp7	set	btemp+8
  4282                           tblptru	equ	0xFF8
  4283                           tblptrh	equ	0xFF7
  4284                           tblptrl	equ	0xFF6
  4285                           tablat	equ	0xFF5
  4286                           prodh	equ	0xFF4
  4287                           prodl	equ	0xFF3
  4288                           intcon	equ	0xFF2
  4289                           intcon2	equ	0xFF1
  4290                           intcon3	equ	0xFF0
  4291                           indf0	equ	0xFEF
  4292                           postinc0	equ	0xFEE
  4293                           fsr0h	equ	0xFEA
  4294                           fsr0l	equ	0xFE9
  4295                           wreg	equ	0xFE8
  4296                           postdec1	equ	0xFE5
  4297                           plusw1	equ	0xFE3
  4298                           fsr1l	equ	0xFE1
  4299                           indf2	equ	0xFDF
  4300                           plusw2	equ	0xFDB
  4301                           fsr2h	equ	0xFDA
  4302                           fsr2l	equ	0xFD9
  4303                           status	equ	0xFD8


Data Sizes:
    Strings     42
    Constant    12
    Data        17
    BSS         26
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     26      71
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    msg2LCD@datos	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_8(CODE[4]), STR_7(CODE[3]), STR_6(CODE[6]), STR_5(CODE[4]), 
		 -> STR_4(CODE[3]), STR_3(CODE[11]), STR_2(CODE[4]), STR_1(CODE[14]), 
		 -> horaLCD@mensaje(COMRAM[5]), 

    Crear_Caracter@linea	PTR unsigned char  size(2) Largest target is 7
		 -> LCD_init@varFlecha(COMRAM[7]), 


Critical Paths under _main in COMRAM

    _funtLCD->_var3LCD
    _var3LCD->___awdiv
    _horaLCD->___awdiv
    _set_CURSOR->_write_CMD
    _msg2LCD->_write_DATA
    ___awdiv->___awmod
    _clear_LCD->_write_CMD
    _PWM_porcent->___lwdiv
    _LCD_init->_Crear_Caracter
    _ret_HOME->_write_CMD
    _Crear_Caracter->_char2LCD
    _write_CMD->_write_LCD
    _char2LCD->_write_DATA
    _write_DATA->_write_LCD

Critical Paths under _myISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _myISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _myISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _myISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _myISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _myISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _myISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _myISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _myISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   10985
                           _LCD_init
                           _PicIni21
                         _TIMER0_INI
                          _clear_LCD
                         _encoderIni
                        _funtEncoder
                            _funtLCD
 ---------------------------------------------------------------------------------
 (1) _funtLCD                                              0     0      0   10230
                        _PWM_porcent
                         _aspiradora
                           _char2LCD
                          _clear_LCD
                            _horaLCD
                              _luces
                            _msg2LCD
                         _set_CURSOR
                            _var3LCD
 ---------------------------------------------------------------------------------
 (2) _var3LCD                                             12     9      3    3964
                                             14 COMRAM    12     9      3
                            ___awdiv
                            ___awmod
                           _char2LCD
                         _set_CURSOR
 ---------------------------------------------------------------------------------
 (2) _luces                                                1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _horaLCD                                             10     7      3    4539
                                             14 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            _msg2LCD
                         _set_CURSOR
 ---------------------------------------------------------------------------------
 (3) _set_CURSOR                                           1     1      0     112
                                              2 COMRAM     1     1      0
                          _read_BUSY
                          _write_CMD
 ---------------------------------------------------------------------------------
 (2) _msg2LCD                                              2     0      2     818
                                              2 COMRAM     2     0      2
                          _read_BUSY
                         _write_DATA
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1968
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1212
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _clear_LCD                                            0     0      0      89
                          _read_BUSY
                          _write_CMD
 ---------------------------------------------------------------------------------
 (2) _aspiradora                                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PWM_porcent                                          2     2      0     567
                                              7 COMRAM     2     2      0
                            ___lwdiv
                            _pwm_set
 ---------------------------------------------------------------------------------
 (3) _pwm_set                                              2     1      1     208
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _funtEncoder                                          0     0      0       0
                         _funtMENUSW
 ---------------------------------------------------------------------------------
 (2) _funtMENUSW                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _encoderIni                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TIMER0_INI                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PicIni21                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             7     7      0     666
                                              8 COMRAM     7     7      0
                     _Crear_Caracter
                          _read_BUSY
                           _ret_HOME
                          _write_CMD
 ---------------------------------------------------------------------------------
 (2) _ret_HOME                                             0     0      0      89
                          _read_BUSY
                          _write_CMD
 ---------------------------------------------------------------------------------
 (2) _Crear_Caracter                                       5     2      3     464
                                              3 COMRAM     5     2      3
                           _char2LCD
                          _read_BUSY
                          _write_CMD
 ---------------------------------------------------------------------------------
 (4) _write_CMD                                            1     1      0      66
                                              1 COMRAM     1     1      0
                          _write_LCD
 ---------------------------------------------------------------------------------
 (3) _char2LCD                                             1     1      0     111
                                              2 COMRAM     1     1      0
                          _read_BUSY
                         _write_DATA
 ---------------------------------------------------------------------------------
 (4) _write_DATA                                           1     1      0      66
                                              1 COMRAM     1     1      0
                          _write_LCD
 ---------------------------------------------------------------------------------
 (5) _write_LCD                                            1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _read_BUSY                                            1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _myISR                                                0     0      0       0
                    _encoderInterrup
                            _tic_LCD
                        _tic_encoder
 ---------------------------------------------------------------------------------
 (7) _tic_encoder                                          0     0      0       0
                  _antireboteEncoder
 ---------------------------------------------------------------------------------
 (8) _antireboteEncoder                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _tic_LCD                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _encoderInterrup                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_init
     _Crear_Caracter
       _char2LCD
         _read_BUSY
         _write_DATA
           _write_LCD
       _read_BUSY
       _write_CMD
         _write_LCD
     _read_BUSY
     _ret_HOME
       _read_BUSY
       _write_CMD
         _write_LCD
     _write_CMD
       _write_LCD
   _PicIni21
   _TIMER0_INI
   _clear_LCD
     _read_BUSY
     _write_CMD
       _write_LCD
   _encoderIni
   _funtEncoder
     _funtMENUSW
   _funtLCD
     _PWM_porcent
       ___lwdiv
       _pwm_set
     _aspiradora
     _char2LCD
       _read_BUSY
       _write_DATA
         _write_LCD
     _clear_LCD
       _read_BUSY
       _write_CMD
         _write_LCD
     _horaLCD
       ___awdiv
         ___awmod (ARG)
       ___awmod
       _msg2LCD
         _read_BUSY
         _write_DATA
           _write_LCD
       _set_CURSOR
         _read_BUSY
         _write_CMD
           _write_LCD
     _luces
     _msg2LCD
       _read_BUSY
       _write_DATA
         _write_LCD
     _set_CURSOR
       _read_BUSY
       _write_CMD
         _write_LCD
     _var3LCD
       ___awdiv
         ___awmod (ARG)
       ___awmod
       _char2LCD
         _read_BUSY
         _write_DATA
           _write_LCD
       _set_CURSOR
         _read_BUSY
         _write_CMD
           _write_LCD

 _myISR (ROOT)
   _encoderInterrup
   _tic_LCD
   _tic_encoder
     _antireboteEncoder

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     1A      47       1       75.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      47      20        0.0%
DATA                 0      0      47       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Thu Nov 22 17:09:54 2018

       Crear_Caracter@linea 001E                          l53 775E                ___awdiv@sign 0026  
               __CFG_BOR$ON 000000                 __CFG_BORV$3 000000                __CFG_CP0$OFF 000000  
              __CFG_CP1$OFF 000000                         l113 7FB6                         l114 7FBC  
                       l115 7FD4                         l131 7E94                         l116 7FDA  
                       l140 7E7A                         l132 7DAE                         l125 78A4  
                       l117 7FF2                         l133 7EAE                         l118 7FF8  
                       l134 7DCC                         l127 78BC                         l135 7DEA  
                       l136 7E08                         l145 79C0                         l137 7E34  
                       l170 7B62                         l146 7994                         l139 7E4E  
                       l173 7B78                         l182 7BBA                         l167 7B4C  
                       l176 7B8E                         l179 7BA4                         l198 7796  
                       l366 777A                         l374 76C2                         l543 7CFA  
                       l552 7D4A                         l536 7D2C                         l544 7D22  
                       l553 7D5E                         l537 7CCC                         l570 79FE  
                       l538 7CF0                         l571 7A08                         l379 76D4  
                       l548 7D86                         l556 7D64                         l565 7A30  
                       l573 7A12                         l557 7D70                         l549 7D3C  
                       l574 7A1C                         l566 79EA                         l567 79F4  
                       l559 7D80                         l576 7A26                         l880 7B22  
                       l872 7ACA                         l881 7B30                         l873 7ADA  
                       l875 7AF8                         l876 7AF0                         l892 7A94  
                       l893 7A9E                         l885 7A5A                         l894 7AAC  
                       l886 7A66                         l879 7B18                         l888 7A7C  
                       l889 7A74                __CFG_CPB$OFF 000000                         _LCD 0043  
                       u500 7CE8                         _PR2 000FCB                         u530 7D18  
                       _col 003C                ___awmod@sign 0020            _MultiplicadorSet 0012  
                       wreg 000FE8                __CFG_LVP$OFF 000000                __CFG_WDT$OFF 000000  
                      l1131 795E                        l1132 7956                        l1135 797E  
                      l1136 7988                        l1808 7D86                        l2468 7894  
                      STR_1 2025                        STR_2 2044                        STR_3 2033  
                      STR_4 204C                        STR_5 2048                        STR_6 203E  
                      STR_7 204C                        STR_8 2048                        u1200 79B4  
                      u1210 79E0                        u1300 7AFC                        u1207 79AA  
                      u1400 7962                        u1217 79D6                        _LATA 000F89  
                      u1430 7FCC                        _LATB 000F8A                        _LATC 000F8B  
                      u1360 7A80                        u1440 7FEA                        _LATD 000F8C  
                      _LATE 000F8D                        u1531 7BD0                        _MENU 001A  
                      _RBIE 007F93                        _RBIF 007F90                        _RBIP 007F88  
                      i2l61 771E                        _RBPU 007F8F                        _fila 003D  
                      _main 7746                        fsr0h 000FEA                        indf0 000FEF  
                      fsr0l 000FE9                        indf2 000FDF                        fsr1l 000FE1  
                      fsr2l 000FD9                        btemp 0048                        prodh 000FF4  
                      prodl 000FF3                        start 200E               __CFG_IESO$OFF 000000  
              msg2LCD@datos 001D               __CFG_MCLRE$ON 000000                 _PWM_porcent 77B6  
              ___param_bank 000000                 ?_TIMER0_INI 001B               __CFG_PLLDIV$5 000000  
          __end_of_LCD_init 7BEE                       ?_main 001B                 horaLCD@dato 0029  
           __end_of___awdiv 7B3A                       _EEADR 000FA9             __end_of___awmod 7AB6  
                     _CMCON 000FB4             ___awdiv@divisor 0023             __end_of___lwdiv 7992  
                     i2l503 7866                       i2l504 785C                       i2l530 793A  
                     i2l522 790A                       i2l515 78EE                       i2l508 7878  
                     i2l524 790E                       i2l525 7918                       i2l527 792A  
                     i2l529 792E             ___awdiv@counter 0025                       _RCREG 000FAE  
                     _TMR0H 000FD7                       _TMR1H 000FCF                       _TMR0L 000FD6  
                     _TMR1L 000FCE                       _SPBRG 000FAF                       _PORTA 000F80  
                     _PORTB 000F81               __CFG_USBDIV$2 000000                       _TRISA 000F92  
                     _TRISB 000F93                       _TRISC 000F94                       _TRISD 000F95  
                     _TRISE 000F96                       _TXREG 000FAD                ?_funtEncoder 001B  
             __CFG_PWRT$OFF 000000               __CFG_WRT0$OFF 000000               __CFG_WRT1$OFF 000000  
            __CFG_EBTR0$OFF 000000              __CFG_FCMEN$OFF 000000              __CFG_EBTR1$OFF 000000  
           __end_of_msg2LCD 79E8               __CFG_WRTB$OFF 000000               __CFG_WRTC$OFF 000000  
           __end_of_horaLCD 7CBE              __CFG_EBTRB$OFF 000000             __end_of_var3LCD 8000  
           __end_of_funtLCD 7EB4                       _myISR 2008                       _luces 76C6  
           __end_of_tic_LCD 7692     __size_of_Crear_Caracter 003C                       tablat 000FF5  
                     plusw1 000FE3                       plusw2 000FDB             __end_of_pwm_set 778E  
                     ttemp5 0049                       ttemp6 004C                       ttemp7 0050  
                     status 000FD8                       wtemp8 0049             __initialization 780C  
              __end_of_main 7768            __end_of_PicIni21 780C                      ??_main 0035  
             __activetblptr 000002                      _ADCON0 000FC2                      _ADCON1 000FC1  
                    _ADCON2 000FC0                      ?_myISR 001B                ?_tic_encoder 001B  
                    _ADRESH 000FC4                      _ADRESL 000FC3                      _EEDATA 000FA8  
                    _CCPR1L 000FBE                      ?_luces 001B                      _EECON2 000FA7  
          ___awdiv@dividend 0021                      _INT0IE 007F94                      _INT0IF 007F91  
                    _INT1IE 007F83                      _INT1IF 007F80            __end_of_char2LCD 7674  
       __size_of_TIMER0_INI 001A                      _TMR0IF 007F92                      _SPBRGH 000FB0  
            __CFG_VREGEN$ON 000000    __size_of_encoderInterrup 003C              __CFG_XINST$OFF 000000  
                 ??___awdiv 0025              __CFG_STVREN$ON 000000                   ??___awmod 001F  
                 ??___lwdiv 001F                      clear_0 7832                      _varPWM 0007  
          ___awdiv@quotient 0027                      _teclas 2019             ___awmod@divisor 001D  
          __end_of_ret_HOME 764C             ___awmod@counter 001F                   ??_msg2LCD 001F  
                 ??_horaLCD 002C                   ??_var3LCD 002C                   ??_funtLCD 0035  
              __pdataCOMRAM 0035                   ??_tic_LCD 001B                __mediumconst 0000  
                    tblptrh 000FF7                      tblptrl 000FF6                      tblptru 000FF8  
             _OffsetPeriodo 0040                   ??_pwm_set 001C             PWM_porcent@data 0023  
                __accesstop 0060     __end_of__initialization 7838             __CFG_PBADEN$OFF 000000  
                 ?_LCD_init 001B               ___rparam_used 000001                var3LCD@datos 0029  
            __pcstackCOMRAM 001B               __end_of_myISR 7726               __end_of_luces 76D8  
        __size_of_clear_LCD 000C        __size_of_funtEncoder 00E4                     ??_myISR 001B  
                   ??_luces 001B              _Crear_Caracter 7882             Crear_Caracter@i 0021  
                 ?_PicIni21 001B          __size_of_read_BUSY 0028                  __pnvCOMRAM 0046  
                ??_LCD_init 0023                ?_PWM_porcent 001B                ??_TIMER0_INI 001B  
         ??_encoderInterrup 001B                read_BUSY@aux 001B               horaLCD@cursor 002B  
                 ?_char2LCD 001B                     _ENCODER 0042                char2LCD@dato 001D  
                _encoderIni 76D8      __end_of_Crear_Caracter 78BE                  _aspiradora 76B4  
                ??_PicIni21 001B           __end_of_clear_LCD 7658        __size_of_tic_encoder 003E  
        __end_of_TIMER0_INI 7706                  _frecuencia 0044          __size_of_write_CMD 000E  
        __size_of_write_LCD 0020                   ?_ret_HOME 001B                     __Hparam 0000  
                   __Lparam 0000                  _funtMENUSW 79E8                     ___awdiv 7AB6  
                   ___awmod 7A46                     ___lwdiv 7940                __psmallconst 2018  
                   __pcinit 780C                     __ramtop 0800                     _boolASP 0019  
                   _boolPWM 0017                     _flag_kb 000B                     __ptext0 7746  
                   __ptext1 7DA2                     __ptext2 7EB4                     __ptext3 76C6  
                   __ptext4 7BEE                     __ptext5 7692                     __ptext6 7992  
                   __ptext7 7A46                     __ptext8 7AB6                     __ptext9 764C  
                ??_char2LCD 001D                     _msg2LCD 7992           __end_of_read_BUSY 77B6  
                 _T0CONbits 000FD5             horaLCD@segundos 0032                     _horaLCD 7BEE  
                 _T1CONbits 000FCD                     _var3LCD 7EB4                     _funtLCD 7DA2  
                 _T2CONbits 000FCA                     _tic_LCD 7682            ___awmod@dividend 001B  
           ?_Crear_Caracter 001E                  _set_CURSOR 7692                     _pwm_set 7768  
            __pintcode_body 7706               debounce@state 0011        end_of_initialization 7838  
            set_CURSOR@posi 001D               __Lmediumconst 0000                     int_func 7706  
                ??_ret_HOME 001D           LCD_init@varFlecha 0023                   _RCSTAbits 000FAB  
                   postdec1 000FE5                     postinc0 000FEE                   _PORTAbits 000F80  
                 _PORTBbits 000F81                   _PORTDbits 000F83                   _PORTEbits 000F84  
         __end_of_write_CMD 7682          _EstadoDeLosBotones 0016           __end_of_write_LCD 7746  
               ?_encoderIni 001B                   _TRISAbits 000F92                   _TRISBbits 000F93  
                 _TRISCbits 000F94                   _TRISEbits 000F96               LCD_init@F3134 0035  
               ?_aspiradora 001B               var3LCD@cifras 002E                 _CCP1CONbits 000FBD  
             var3LCD@cursor 002B                   _TXSTAbits 000FAC           __size_of_LCD_init 00B4  
               ?_funtMENUSW 001B                  _write_DATA 7658                _var3LCD$2425 0033  
              _var3LCD$2426 002C        __size_of_PWM_porcent 002A                   _EncoderSW 003E  
               _BAUDCONbits 000FB8               __pidataCOMRAM 76A3              __end_of_teclas 2025  
       start_initialization 780C                 ?_set_CURSOR 001B                 pwm_set@duty 001B  
         __size_of_PicIni21 002C             _encoderInterrup 7846              tecla@status_KB 0009  
                 _LowerByte 0014         __size_of_encoderIni 0014              luces@est_luces 001B  
          __CFG_LPT1OSC$OFF 000000         __size_of_aspiradora 0012    tic_debounce@debounce_tic 003F  
                 _UpperByte 0041               ??_funtEncoder 001B           __size_of_char2LCD 000E  
               __pbssCOMRAM 0001         __size_of_funtMENUSW 005E                   _clear_LCD 764C  
          ___lwdiv@dividend 001B           __size_of_ret_HOME 000C                   _boolLUCES 0018  
                 __pintcode 2008         __size_of_set_CURSOR 0010                 ?_write_DATA 001B  
                  ?___awdiv 0021                    ?___awmod 001B                    ?___lwdiv 001B  
          ??_Crear_Caracter 0021                    ?_msg2LCD 001D                    ?_horaLCD 0029  
                  ?_var3LCD 0029                 __smallconst 2018                    ?_funtLCD 001B  
                  ?_tic_LCD 001B              _desplazar_tout 0003                   _read_BUSY 778E  
            pwm_set@periodo 001C            ___lwdiv@quotient 001F                    ?_pwm_set 001B  
            horaLCD@mensaje 002C               ??_tic_encoder 001B              __size_of_myISR 571E  
   __end_of_encoderInterrup 7882              __size_of_luces 0012              horaLCD@minutos 0031  
       __end_of_funtEncoder 7DA2                debounce@cnt0 0010                debounce@cnt1 000F  
                  _LATBbits 000F8A                    _LCD_init 7B3A                    _LCD_tout 0046  
                  _PIE1bits 000F9D                 _encoderTout 000C                  ?_clear_LCD 001B  
                  _PIR1bits 000F9E            __CFG_WDTPS$32768 000000                  _ADCON0bits 000FC2  
             _Multiplicador 0013                ??_encoderIni 001B                    _Flag_RB0 000E  
                  _Flag_RB1 000D             _MedioPeriodoSet 0005                  ?_read_BUSY 001B  
                 _write_CMD 7674                   _write_LCD 7726           _antireboteEncoder 78FC  
               _INTCON2bits 000FF1                 _INTCON3bits 000FF0                   copy_data0 7820  
              _varEncoderSW 0015                ??_aspiradora 001B         __size_of_write_DATA 000E  
                  _PicIni21 77E0          ?_antireboteEncoder 001B         __end_of_tic_encoder 78FC  
                _EECON1bits 000FA6                    __Hrparam 0000         ??_antireboteEncoder 001B  
                  __Lrparam 0000                ??_funtMENUSW 001B          __end_of_encoderIni 76EC  
            write_DATA@dato 001C            __size_of___awdiv 0084            __size_of___awmod 0070  
          __size_of___lwdiv 0052          __end_of_aspiradora 76C6                    _char2LCD 7666  
          __size_of_msg2LCD 0056            __size_of_horaLCD 00D0            __size_of_var3LCD 014C  
               _funtEncoder 7CBE            __size_of_funtLCD 0112                    _delay_kb 000A  
          __size_of_tic_LCD 0010   __end_of_antireboteEncoder 7940                ??_set_CURSOR 001D  
           ___lwdiv@divisor 001D             ___lwdiv@counter 0021                  ?_write_CMD 001B  
                ?_write_LCD 001B                    __ptext10 76B4                    __ptext11 77B6  
                  __ptext20 7640                    __ptext12 7768                    __ptext21 7882  
                  __ptext13 7940                    __ptext30 7682                    __ptext22 7674  
                  __ptext14 7CBE                    __ptext31 7846                    __ptext23 7666  
                  __ptext15 79E8                    __ptext24 7658                    __ptext16 76D8  
                  __ptext25 7726                    __ptext17 76EC                    __ptext26 778E  
                  __ptext18 77E0                    __ptext19 7B3A                    __ptext28 78BE  
                  __ptext29 78FC            __size_of_pwm_set 0026            ?_encoderInterrup 001B  
        __end_of_funtMENUSW 7A46               __size_of_main 0022                    _ret_HOME 7640  
               ??_clear_LCD 001D               ??_PWM_porcent 0022           aspiradora@est_asp 001B  
                  int$flags 0048          __end_of_set_CURSOR 76A2       __CFG_CPUDIV$OSC1_PLL2 000000  
                _INTCONbits 000FF2                 ??_read_BUSY 001B                 _tic_encoder 78BE  
                  intlevel2 0000               write_CMD@dato 001C       antireboteEncoder@cont 0001  
             write_LCD@dato 001B                ??_write_DATA 001C                  _TIMER0_INI 76EC  
       __end_of_PWM_porcent 77E0  __size_of_antireboteEncoder 0044                 ??_write_CMD 001C  
               ??_write_LCD 001B          __CFG_FOSC$HSPLL_HS 000000          __end_of_write_DATA 7666  
     PWM_porcent@porcentaje 0022     Crear_Caracter@direccion 0020  
